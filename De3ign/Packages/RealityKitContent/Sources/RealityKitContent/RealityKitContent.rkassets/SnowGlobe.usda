#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["toy_drummer_idle", "Base", "ParticleEmitter", "Sphere", "Material", "Model_Sorting_Group", "Cube", "Sphere_2", "base_with_smart_uv", "Globe"]
    float3 xformOp:translate = (-0.06457275, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "Globe" (
        active = true
    )
    {
        reorder nameChildren = ["toy_drummer_idle", "Base", "ParticleEmitter", "Sphere", "Material", "Model_Sorting_Group"]
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "toy_drummer_idle" (
            active = true
            references = @toy_drummer_idle.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.007, 0.007, 0.007)
            float3 xformOp:translate = (0.015000001, 0.14, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Base" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.5707964, 0, 0)
            }
            references = @Base.usdc@
        )
        {
            quatf xformOp:orient = (0.7071067, -0.70710677, 0, 0)
            float3 xformOp:scale = (0.39999995, 0.39999995, 0.39999995)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Root"
            {
                over "Scenes"
                {
                    over "Scene"
                    {
                        over "snow_globe_base"
                        {
                            over "snow_on_grass"
                            {
                                over "Geometry_134" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                    customData = {
                                        dictionary RE = {
                                            dictionary mesh = {
                                                dictionary v1 = {
                                                    bool reorderVertexCaching = 0
                                                }
                                            }
                                        }
                                    }
                                )
                                {
                                    rel material:binding = </Root/Globe/Base/_materials/Material_Snow> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "grass"
                            {
                                quatf xformOp:orient = (0.7071068, 1.1717824e-15, 0.7071067, -1.1717822e-15)
                                float3 xformOp:scale = (0.5359673, 0.5347822, 0.5322226)
                                double3 xformOp:translate = (-482.59991455078125, -509.4136962890625, 60.12488555908203)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }

            over "_materials"
            {
                over "Material_Snow"
                {
                    token cullMode = "unspecified" (
                        allowedTokens = ["unspecified", "none", "front", "back"]
                    )
                    token outputs:mtlx:surface.connect = </Root/Globe/Base/_materials/Material_Snow/PreviewSurface.outputs:out>
                    token outputs:surface.connect = </Root/Globe/Base/_materials/Material_Snow/Principled_BSDF.outputs:surface>

                    over "PreviewSurface" (
                        active = true
                    )
                    {
                        color3f inputs:diffuseColor.connect = </Root/Globe/Base/_materials/Material_Snow/TiledImage.outputs:out>
                    }

                    over "Principled_BSDF" (
                        active = false
                    )
                    {
                    }

                    over "image"
                    {
                        asset inputs:file = @Snow004_2K-JPG_Color.jpg@
                        string inputs:filtertype = "cubic"
                        float2 inputs:texcoord.connect = None
                        string inputs:uaddressmode = "periodic"
                        float2 ui:nodegraph:node:pos = (-680.8953, -484.07547)
                        int ui:nodegraph:node:stackingOrder = 411
                    }

                    def Shader "TiledImage"
                    {
                        uniform token info:id = "ND_tiledimage_color3"
                        color3f inputs:default = (1, 1, 1) (
                            colorSpace = "srgb_displayp3"
                        )
                        asset inputs:file = @Snow004_2K-JPG_Color.jpg@
                        string inputs:filtertype = "closest"
                        float2 inputs:realworldimagesize = (10, 10)
                        float2 inputs:realworldtilesize = (1, 1)
                        float2 inputs:texcoord
                        float2 inputs:uvoffset = (0, 0)
                        float2 inputs:uvtiling = (1, 1)
                        color3f outputs:out
                        float2 ui:nodegraph:node:pos = (-439.41763, -386.39194)
                        int ui:nodegraph:node:stackingOrder = 409
                        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                    }

                    over "Ramp4Corners"
                    {
                        float2 ui:nodegraph:node:pos = (374.10553, -380.79782)
                        int ui:nodegraph:node:stackingOrder = 367
                        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                    }
                }
            }
        }

        def Xform "ParticleEmitter"
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.008204564, 0.21410163, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "VFXEmitter"
            {
                token info:id = "RealityKit.VFXEmitter"

                def RealityKitStruct "currentState"
                {
                    token birthDirection = "Constant"
                    token birthLocation = "Surface"
                    float3 emissionDirection = (0, -1, 0)
                    double emissionDuration = 1
                    double emissionDurationVariation = 0
                    token emitterShape = "Sphere"
                    double idleDuration = 0
                    double idleDurationVariation = 0
                    bool isLocal = 1
                    bool isLocalFields = 0
                    bool isSpawningEnabled = 0
                    bool loops = 1
                    float particleSpeed = 0.08
                    float particleSpeedVariation = 0.04
                    float3 shapeSize = (0.1, 0.04, 0.1)
                    bool spawnInheritParentColor = 0
                    token spawnOccasion = "OnUpdate"
                    float spawnSpreadFactor = 0
                    float spawnSpreadFactorVariation = 0
                    float spawnVelocityFactor = 1
                    double warmupDuration = 0

                    def RealityKitStruct "mainEmitter"
                    {
                        float3 acceleration = (0, 0, 0)
                        token billboardMode = "Billboard"
                        float birthRate = 500
                        float birthRateVariation = 10
                        token blendMode = "Alpha"
                        float colorEvolutionPower = 0
                        float dampingFactor = 0
                        float4 endColorA = (1, 1, 1, 1)
                        float4 endColorB = (1, 1, 1, 1)
                        bool isLightingEnabled = 0
                        float noiseAnimationSpeed = 2
                        float noiseScale = 1
                        float noiseStrength = 0.03
                        token opacityOverLife = "GradualFadeInOut"
                        float particleAngle = 3.1415925
                        float particleAngleVariation = 3.1415925
                        float particleAngularVelocity = 0
                        float particleAngularVelocityVariation = 0.5
                        asset particleImage = @ParticleEmitterPresetTextures/snow.png@
                        double particleLifeSpan = 1.5
                        double particleLifeSpanVariation = 0.2
                        float particleMass = 1
                        float particleMassVariation = 0
                        float particleSize = 0.001
                        float particleSizeVariation = 0.002
                        float3 radialGravityCenter = (1, 1, 0)
                        float radialGravityStrength = 0
                        float sizeMultiplierAtEndOfLifespan = 0.8
                        float sizeMultiplierAtEndOfLifespanPower = 10
                        token sortOrder = "IncreasingDepth"
                        float spreadingAngle = 0
                        float4 startColorA = (1, 1, 1, 1)
                        float4 startColorB = (1, 1, 1, 1)
                        float stretchFactor = 0
                        bool useEndColor = 1
                        bool useEndColorRange = 0
                        bool useStartColorRange = 0
                        float3 vortexDirection = (0, 1, 0)
                        float vortexStrength = 0
                    }

                    def RealityKitStruct "spawnedEmitter"
                    {
                    }
                }
            }

            def RealityKitComponent "MeshSorting"
            {
                rel group = </Root/Globe/Model_Sorting_Group>
                token info:id = "RealityKit.MeshSorting"
                int priorityInGroup = 0
            }
        }

        def Sphere "Sphere" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Globe/Sphere/DefaultMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1.3, 1.3, 1.3)
            float3 xformOp:translate = (0.006401047, 0.14139074, 0.0023740903)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Globe/Sphere/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:metallic = 0.9
                    float inputs:opacity = 0.1
                    float inputs:roughness = 0.6
                    token outputs:surface
                }
            }

            def RealityKitComponent "MeshSorting"
            {
                rel group = </Root/Globe/Model_Sorting_Group>
                token info:id = "RealityKit.MeshSorting"
                int priorityInGroup = 1
            }
        }

        def Material "Material"
        {
            token outputs:mtlx:surface.connect = </Root/Globe/Material/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:opacity = 0.3
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
                int ui:nodegraph:node:stackingOrder = 2
            }
        }

        def RealityKitMeshSortingGroup "Model_Sorting_Group" (
            active = true
        )
        {
        }
    }
}

