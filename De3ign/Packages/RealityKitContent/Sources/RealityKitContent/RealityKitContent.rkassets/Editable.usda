#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    def Cube "floor" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/floor/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (54.999992, 0.09999999, 29.999996)
        float3 xformOp:translate = (-3.0621748, 0, 0.96173525)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/floor/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/floor/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @20200509161043_5eb6658361d83.jpg@
                float2 inputs:st.connect = </Root/floor/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor/DefaultMaterial/DefaultSurfaceShader.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }
    }

    def Cube "wall" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/wall/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (54.999992, 14.999998, 0.09999999)
        float3 xformOp:translate = (-3.0787168, 1.4915866, -2.0265675)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/wall/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.91177773, 0.91177773, 0.91177773) (
                    colorSpace = "lin_srgb"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "wall_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/wall_1/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.09999999, 14.999998, 29.999996)
        float3 xformOp:translate = (2.4288642, 1.4889498, 0.96097946)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/wall_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.9520049, 0.9614307, 0.9614307) (
                    colorSpace = "srgb_displayp3"
                )
                color3f inputs:diffuseColor.connect = </Root/wall_1/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @DSC00655_AF.jpg@
                float2 inputs:st.connect = </Root/wall_1/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/wall_1/DefaultMaterial/DefaultSurfaceShader.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }
    }
}

