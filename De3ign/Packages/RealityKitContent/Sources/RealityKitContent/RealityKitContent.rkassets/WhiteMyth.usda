#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["floor", "floor_1", "floor_2", "floor_3", "floor_4", "floor_5", "breakablefloor", "ikea_bed", "Computer_Desk", "safe_animated", "dresser", "dresserlock", "fences", "Pine_tree", "Pine_tree_1", "Rock", "Rock_1", "Poster_Basic__Low_Poly", "lighter", "lighter_", "door_animated", "wall1", "wall1_1", "wall1_2", "wall1_3", "wall1_4", "wall1_5", "wall1_6", "doorkey", "Picture_Frame", "Picture_Frame_1", "Picture_Frame_2", "wall1_7", "wall1_8", "candle", "snowglobe", "paper", "battery", "dresserkey", "hammer", "Indoor_Plant_with_pot_a", "ceiling", "ceilinglight", "DirectionalLight", "window_animated", "switch_window", "switch_light", "SkyDome_1", "photoframe", "cockroach", "iphone", "Snacksinabox", "anchor_doorlock", "candlefire", "ceiling_snow"]
    float3 xformOp:scale = (0.2, 0.2, 0.2)
    float3 xformOp:translate = (3.7252903e-9, 7.450581e-9, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Cube "floor" (
        active = false
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/floor/DefaultMaterial>
        double size = 0.2
        float3 xformOp:scale = (100, 3, 100)
        float3 xformOp:translate = (0, -0.2, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/floor/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/floor/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @2145.jpg@
                float2 inputs:st.connect = </Root/floor/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.3, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 1
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def "ikea_bed" (
        active = true
        references = @ikea_bed.usdz@
    )
    {
        float3 xformOp:scale = (0.06, 0.06, 0.06)
        float3 xformOp:translate = (3.8924541, -0.024834827, 2.573936)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (126.256676, 20, 206.99997)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (48.63963, 55.999992, -103.499985)
                }
            }
        }
    }

    def "safe_animated" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, -1.5707963, 0)
        }
        references = @safe_animated.usdz@
    )
    {
        quatf xformOp:orient = (0.70710677, 0, -0.70710677, 0)
        float3 xformOp:scale = (1.2, 1.2, 1.2)
        float3 xformOp:translate = (1.303468, -0.5728197, -6.8233886)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.8037767, 2.1131752, 1.4136784)
                float height = 2.1131752
                float radius = 1.0565876
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.051440686, 1.4995152, 0)
                }
            }
        }
    }

    def "dresser" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
        references = @Dresser.usdz@
    )
    {
        reorder nameChildren = ["Materials", "Meshes", "SkinnedMeshes", "Collider", "InputTarget"]
        quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
        float3 xformOp:scale = (0.02, 0.02, 0.02)
        float3 xformOp:translate = (-8.730837, 0.13082027, -1.8378868)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "ea1b8f8f6d7c4225ab4e678f6cf37aa9_fbx"
                {
                    over "Object_2"
                    {
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (1, 1, 1)
                        float3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                        over "RootNode"
                        {
                            over "Object_4"
                            {
                                over "Object001"
                                {
                                    quatf xformOp:orient = (0.7071067, -0.7071068, 0, 0)
                                    float3 xformOp:scale = (1, 1.0000001, 1.0000001)
                                    float3 xformOp:translate = (-0.000091552734, 441.99997, 0.000002781579)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                    over "Object_18"
                                    {
                                        quatf xformOp:orient = (1, 0, 0, 0)
                                        float3 xformOp:scale = (1, 1, 1)
                                        float3 xformOp:translate = (340, -390.00006, 419.99997)
                                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                        over "Object001_Tumb_0"
                                        {
                                            quatf xformOp:orient = (1, 0, 0, 0)
                                            float3 xformOp:scale = (1, 1, 1)
                                            float3 xformOp:translate = (0, 0, 0)
                                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                            over "Object001_Tumb_0"
                                            {
                                                float3 xformOp:translate = (0, 0, 0)
                                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        over "SkinnedMeshes"
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.2555575, 0.2555575, 0.2555575)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Sketchfab_model"
            {
                over "ea1b8f8f6d7c4225ab4e678f6cf37aa9_fbx"
                {
                    over "Object_2"
                    {
                        over "RootNode"
                        {
                            over "Object_4"
                            {
                                over "_rootJoint"
                                {
                                    over "skin0"
                                    {
                                        reorder nameChildren = ["skeleton", "Take_001", "Object003_Fasad_0", "Object092_Fasad_0", "Object094_Fasad_0", "Object219_Napr_0"]
                                        over "skeleton"
                                        {
                                            float3 xformOp:translate = (0, 0, 0)
                                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (256.0686, 225.91278, 115.23196)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.000022888184, 112.956375, 2.9266472)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def "door_animated" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, -1.5707963, 0)
        }
        references = @door_animated.usdz@
    )
    {
        quatf xformOp:orient = (0.70710677, 0, -0.70710677, 0)
        float3 xformOp:scale = (0.06, 0.06, 0.06)
        float3 xformOp:translate = (-10, 0, 4.9915037)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "b37afcbbf8564243bc40699160c032e0_fbx"
                {
                    over "Object_2"
                    {
                        over "RootNode"
                        {
                            over "Plane" (
                                active = false
                            )
                            {
                            }

                            over "Plane_004" (
                                active = false
                            )
                            {
                            }
                        }
                    }
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (96.53779, 205.01837, 25.90781)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.0000038146973, 102.509155, 3.9924145)
                }
            }
        }
    }

    def Cube "wall1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/wall1/DefaultMaterial>
        double size = 0.2
        float3 xformOp:scale = (1, 100, 100)
        float3 xformOp:translate = (10, 9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/wall1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def Cube "wall1_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/wall1_1/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 100, 10)
        float3 xformOp:translate = (-10.000035, 9, 8.817832)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/wall1_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def Cube "wall1_2" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/wall1_2/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (100, 100, 1)
        float3 xformOp:translate = (11.012581, 9, 10.000001)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/wall1_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def Cube "wall1_3" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/wall1_3/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (60, 60)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (100, 100, 1)
        float3 xformOp:translate = (0, 9, -10)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/wall1_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def Cube "wall1_4" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/wall1_4/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (60, 60)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (100, 100, 1)
        float3 xformOp:translate = (-13.473054, 9, 10)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/wall1_4/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def Cube "wall1_5" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/wall1_5/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (80, 80)
        int ui:nodegraph:node:stackingOrder = 4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (40, 40, 1)
        float3 xformOp:translate = (-1.9351851, 16.777418, 10.000001)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/wall1_5/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def Cube "wall1_6" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/wall1_6/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (100, 100)
        int ui:nodegraph:node:stackingOrder = 5
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (40, 40, 1)
        float3 xformOp:translate = (-1.9351851, 2.995874, 10.000001)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/wall1_6/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def "doorkey" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.570796, 1.5707963, 0)
        }
        references = @doorkey.usdz@
    )
    {
        quatf xformOp:orient = (-0.5, 0.5, -0.5, -0.5)
        float3 xformOp:scale = (0.003, 0.003, 0.003)
        float3 xformOp:translate = (1.3719267, 0.4533023, -6.854377)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (85.32535, 188.8411, 12.094473)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.619606, 22.26102, -0.0000026226044)
                }
            }
        }
    }

    def "Picture_Frame" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 3.1415927, 0)
        }
        references = @Picture_Frame.usdz@
    )
    {
        reorder nameChildren = ["picture", "Materials", "Meshes"]
        quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        float3 xformOp:translate = (9.949999, 6.8, -4.3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "_D_Oak___Semigloss_001"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "pbr_shader"
                {
                    color3f inputs:diffuseColor = (0.5191068, 0.24338968, 0.04391877)
                }
            }

            over "_D_Oak___Semigloss_004"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "pbr_shader"
                {
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @hint1.jpg@
                    float2 inputs:st.connect = </Root/Picture_Frame/Materials/_D_Oak___Semigloss_004/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Picture_Frame/Materials/_D_Oak___Semigloss_004.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "root"
                {
                    over "GLTF_SceneRootNode"
                    {
                        over "back_panel_001_2"
                        {
                        }

                        over "frame_001_3"
                        {
                        }
                    }
                }
            }
        }

        def Cube "picture" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 3.1415918, 0)
            }
        )
        {
            rel material:binding = </Root/Picture_Frame/picture/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (3.1391647e-7, 0, 1, 0)
            float3 xformOp:scale = (10, 1262, 962)
            float3 xformOp:translate = (5.505371, 149.79724, 120.100006)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Picture_Frame/picture/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 0.40577167, 1) (
                        colorSpace = "lin_srgb"
                    )
                    color3f inputs:diffuseColor.connect = </Root/Picture_Frame/picture/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @hint1.jpg@
                    float2 inputs:st.connect = </Root/Picture_Frame/picture/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Picture_Frame/picture/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }
    }

    def Cube "wall1_7" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/wall1_7/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 100, 100)
        float3 xformOp:translate = (-10.000001, 9, -7.7593346)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/wall1_7/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }
    }

    def Cube "wall1_8" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
    )
    {
        rel material:binding = </Root/wall1_8/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (100, 100)
        int ui:nodegraph:node:stackingOrder = 5
        quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
        float3 xformOp:scale = (40, 60, 1)
        float3 xformOp:translate = (-10.000001, 18.168123, 5.4873357)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/wall1_8/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }
    }

    def "candle" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = @Just_a_Candle.usdz@
    )
    {
        rel material:binding = None (
            bindMaterialAs = "weakerThanDescendants"
        )
        float3 xformOp:scale = (0.005, 0.005, 0.005)
        float3 xformOp:translate = (1.5416013, 4.4002023, -8.203297)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "root"
                {
                    over "GLTF_SceneRootNode"
                    {
                        over "BezierCurve_001_5"
                        {
                        }

                        over "_4_04_1_001_4" (
                            active = false
                        )
                        {
                        }

                        over "_4_04_1_002_3" (
                            active = false
                        )
                        {
                        }

                        over "_4_04_1_2" (
                            active = false
                        )
                        {
                        }
                    }
                }
            }
        }
    }

    def "snowglobe" (
        active = true
        references = @SnowGlobe.usda@
    )
    {
        float3 xformOp:scale = (5, 5, 5)
        float3 xformOp:translate = (-2.674568, 4.3246017, -8.094515)

        over "base_with_smart_uv" (
            active = false
        )
        {
        }
    }

    def "battery" (
        active = true
        references = @AA_Battery.usdz@
    )
    {
        float3 xformOp:scale = (0.05, 0.05, 0.05)
        float3 xformOp:translate = (-8.514947, 1.9588089, -3.2552602)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (6.6752467, 4.4928484, 4.473871)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (2.792031, 1.9591256, 1.5007515)
                }
            }
        }
    }

    def "dresserkey" (
        active = true
        references = @Key_with_Tag.usdz@
    )
    {
        float3 xformOp:scale = (0.1, 0.1, 0.1)
        float3 xformOp:translate = (-1.4832981, -0.88589734, 0.14278959)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (5.0369797, 0.95423627, 14.397755)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-0.7485869, 0.389942, 0.44823956)
                }
            }
        }
    }

    def "hammer" (
        active = true
        customData = {
            float3 rotationEulerHint = (5.9604645e-8, -5.9575342e-8, -1.5394276)
        }
        references = @Hammer.usdz@
    )
    {
        quatf xformOp:orient = (0.71810985, -1.3322676e-15, -4.1480654e-8, -0.6959297)
        float3 xformOp:scale = (0.05, 0.05, 0.05)
        float3 xformOp:translate = (4.2295465, 0.85841143, -2.7975123)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (2.3246782, 25.81861, 26.817879)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 12.977073, -0.47081566)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 1
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 0
            bool lockRotationY = 1
            bool lockRotationZ = 1

            def RealityKitStruct "massFrame"
            {
                float m_mass = 0.5

                def RealityKitStruct "m_pose"
                {
                    quatf orientation = (1, 0, 0, 0)
                    float3 position = (0, 22, -8)
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.4
                double restitution = 0.05
                double staticFriction = 0.4
            }
        }
    }

    def "Indoor_Plant_with_pot_a" (
        active = true
        references = @Indoor_Plant_with_pot_a.usdz@
    )
    {
        float3 xformOp:scale = (0.07, 0.07, 0.07)
        float3 xformOp:translate = (-6.963738, 0, -7.0316033)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "_181f48d75314c8586c911d1188889fe_fbx"
                {
                    over "RootNode"
                    {
                        over "Pot_A"
                        {
                            over "Pot_A_Pot_A_0"
                            {
                                over "Pot_A_Pot_A_0"
                                {
                                    float3 xformOp:translate = (0, 0, 0)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                    def RealityKitComponent "Collider"
                                    {
                                        uint group = 1
                                        uniform token info:id = "RealityKit.Collider"
                                        uint mask = 4294967295
                                        token type = "Default"

                                        def RealityKitStruct "Shape"
                                        {
                                            float3 extent = (0.55, 0.55, 0.5)
                                            token shapeType = "Box"

                                            def RealityKitStruct "pose"
                                            {
                                                float3 position = (0, 0, 0.2699417)
                                            }
                                        }
                                    }

                                    def RealityKitComponent "RigidBody"
                                    {
                                        bool gravityEnabled = 0
                                        uniform token info:id = "RealityKit.RigidBody"
                                        bool isCCDEnabled = 1
                                        bool lockRotationX = 1
                                        bool lockRotationY = 1
                                        bool lockRotationZ = 1
                                        bool lockTranslationX = 1
                                        bool lockTranslationY = 1
                                        bool lockTranslationZ = 1
                                        token motionType = "Static"

                                        def RealityKitStruct "massFrame"
                                        {
                                            def RealityKitStruct "m_pose"
                                            {
                                            }
                                        }

                                        def RealityKitStruct "material"
                                        {
                                            double dynamicFriction = 0.6
                                            double staticFriction = 0.6
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    def Cube "ceiling" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["DefaultMaterial", "Ceiling_Light"]
        rel material:binding = </Root/ceiling/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (100, 1, 100)
        float3 xformOp:translate = (0, 18.9, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/ceiling/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @floormaterial.jpg@
                float2 inputs:st.connect = </Root/ceiling/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/ceiling/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def "Ceiling_Light" (
            active = true
            references = @Ceiling_Light.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.00009999999, 0.01, 0.00009999999)
            float3 xformOp:translate = (0, -0.13607407, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "ceilinglight"
    {
        float3 xformOp:translate = (0, 18.502285, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "PointLight"
        {
            float attenuationFalloffExponent = 0.2
            float attenuationRadius = 100
            token info:id = "RealityKit.PointLight"
            float intensity = 30000
        }
    }

    def "SkyDome_1" (
        active = true
        references = @SkyDome 1.usdz@
    )
    {
        reorder nameChildren = ["Dome_01", "Ground_01", "Cube", "Grid", "Looks"]
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, -1.5, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Looks"
        {
            over "DomeMATSG"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @nightsky.jpg@
                    float2 inputs:st.connect = </Root/SkyDome_1/Looks/DomeMATSG/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/SkyDome_1/Looks/DomeMATSG.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                over "DomeMAT"
                {
                    color3f inputs:diffuseColor.connect = </Root/SkyDome_1/Looks/DomeMATSG/diffuseColor.outputs:rgb>
                }
            }

            over "GroundMATSG"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @snowland.jpg@
                    float2 inputs:st.connect = </Root/SkyDome_1/Looks/GroundMATSG/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/SkyDome_1/Looks/GroundMATSG.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                over "GroundMAT"
                {
                    color3f inputs:diffuseColor.connect = </Root/SkyDome_1/Looks/GroundMATSG/diffuseColor.outputs:rgb>
                }
            }

            over "GridMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }
        }

        over "Grid" (
            active = false
        )
        {
        }

        over "Ground_01" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Computer_Desk/Materials/Wood> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }

        def Cube "Cube" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/SkyDome_1/Cube/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (0.99999994, 0, 0, 0)
            float3 xformOp:scale = (5000, 0.99999994, 5000)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface.connect = </Root/SkyDome_1/Cube/DefaultMaterial/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/SkyDome_1/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (101.607185, 92.69889)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 18

                def Shader "DefaultSurfaceShader" (
                    active = false
                )
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/SkyDome_1/Cube/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @snowland.jpg@
                    float2 inputs:st.connect = </Root/SkyDome_1/Cube/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/SkyDome_1/Cube/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "PreviewSurface"
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    color3f inputs:diffuseColor.connect = </Root/SkyDome_1/Cube/DefaultMaterial/Image.outputs:out>
                    float inputs:metallic
                    float inputs:opacity
                    float inputs:roughness
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-197.47266, 98.44141)
                    int ui:nodegraph:node:stackingOrder = 8
                }

                def Shader "Transform2D"
                {
                    uniform token info:id = "ND_UsdTransform2d"
                    float2 inputs:in = (1, 1)
                    float2 inputs:in.connect = </Root/SkyDome_1/Cube/DefaultMaterial/TextureCoordinates.outputs:out>
                    float inputs:rotation
                    float2 inputs:scale = (3, 3)
                    float2 inputs:translation
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-725.02515, 131.25093)
                    int ui:nodegraph:node:stackingOrder = 58
                }

                def Shader "Image"
                {
                    uniform token info:id = "ND_image_color3"
                    color3f inputs:default
                    asset inputs:file = @snowland.jpg@
                    string inputs:filtertype
                    float2 inputs:texcoord.connect = </Root/SkyDome_1/Cube/DefaultMaterial/Transform2D.outputs:out>
                    string inputs:uaddressmode
                    string inputs:vaddressmode
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (-511.13425, 54.64789)
                    int ui:nodegraph:node:stackingOrder = 27
                }

                def Shader "TextureCoordinates"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-933.6737, 135.97092)
                    int ui:nodegraph:node:stackingOrder = 44
                }
            }
        }
    }

    def Sphere "anchor_doorlock" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/anchor_doorlock/DefaultMaterial>
        double radius = 0.1
        float3 xformOp:scale = (0.1, 0.1, 0.1)
        float3 xformOp:translate = (-10.321053, 5.839194, 7.6144505)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/anchor_doorlock/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Xform "candlefire" (
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
    )
    {
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (5, 5, 5)
        float3 xformOp:translate = (1.540212, 5.649168, -8.229863)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "VFXEmitter"
        {
            token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token birthDirection = "Normal"
                int64 burstCount = 150
                double emissionDuration = 1
                token emitterShape = "Cone"
                bool isEmitting = 1
                bool isLocal = 1
                bool isLocalFields = 1
                float particleSpeed = 0.01
                float3 shapeSize = (0.04, 0.04, 0.04)
                bool spawnInheritParentColor = 0
                token spawnOccasion = "OnDeath"

                def RealityKitStruct "mainEmitter"
                {
                    token billboardMode = "Billboard"
                    float birthRate = 100
                    token blendMode = "Alpha"
                    float colorEvolutionPower = 1
                    float4 endColorA = (0.96828645, 0.7533718, 0.01695968, 1)
                    bool isLightingEnabled = 0
                    float noiseAnimationSpeed = 0
                    float noiseScale = 1
                    float noiseStrength = 0.05
                    token opacityOverLife = "Constant"
                    float particleAngle = 0
                    double particleLifeSpan = 2
                    float particleSize = 0.01
                    float3 radialGravityCenter = (0, 1, 0)
                    float radialGravityStrength = 0.05
                    float sizeMultiplierAtEndOfLifespan = 0.5
                    float4 startColorA = (1, 0.030250736, 0, 1)
                    bool useEndColor = 1
                    bool useEndColorRange = 0
                    bool useStartColorRange = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                }
            }
        }
    }

    def Cube "ceiling_snow" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["DefaultMaterial", "Fence_Wood_1", "VFXEmitter"]
        rel material:binding = </Root/ceiling_snow/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (150, 0.9999998, 150)
        float3 xformOp:translate = (0, 22.914392, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/ceiling_snow/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:opacity = 0
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @floormaterial.jpg@
                float2 inputs:st.connect = </Root/ceiling_snow/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/ceiling_snow/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def RealityKitComponent "VFXEmitter"
        {
            uniform token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                int64 burstCount = 200
                double emissionDuration = 1
                double emissionDurationVariation = 0
                double idleDuration = 0
                double idleDurationVariation = 0
                bool isLocal = 0
                bool isLocalFields = 0
                bool loops = 1
                float particleSpeed = -0.5
                float spawnVelocityFactor = 1
                double warmupDuration = 0

                def RealityKitStruct "mainEmitter"
                {
                    float birthRate = 200
                    float4 endColorA = (0.0013006331, 0.032195132, 1, 1)
                    float noiseAnimationSpeed = 0.05
                    float noiseScale = 0.05
                    float noiseStrength = 0.05
                    token opacityOverLife = "LinearFadeOut"
                    double particleLifeSpan = 8
                    float4 startColorA = (0.9999908, 1, 1, 1)
                    float4 startColorB = (1, 1, 1, 1)
                    bool useEndColor = 0
                    bool useEndColorRange = 0
                    bool useStartColorRange = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                }
            }
        }
    }

    def Cube "paper" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, -0.52359885, 0)
        }
    )
    {
        rel material:binding = </Root/paper/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (0.9659258, 0, -0.25881904, 0)
        float3 xformOp:scale = (5, 0.02, 3)
        float3 xformOp:translate = (-8.724094, 4.6943345, 0.020156022)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/paper/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/paper/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @xvi.jpg@
                float2 inputs:st.connect = </Root/paper/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/paper/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }
    }

    def Cube "floor_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/floor_1/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-124.29317, 152.6477)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (100, 5, 42.5)
        float3 xformOp:translate = (-8.288772e-7, -0.4, -5.75)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/floor_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/floor_1/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @2145.jpg@
                float2 inputs:st.connect = </Root/floor_1/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor_1/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.25, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 1
            float linearDamping = 0.02
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (0, 0, 0)
                float m_mass = 0.001

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.6
                double staticFriction = 0.6
            }
        }
    }

    def Cube "floor_2" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/floor_2/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-104.29317, 172.6477)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (105, 5, 42.5)
        float3 xformOp:translate = (-0.5, -0.4, 5.7500014)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/floor_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/floor_2/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @2145.jpg@
                float2 inputs:st.connect = </Root/floor_2/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor_2/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.25, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 1
            float linearDamping = 0.02
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (0, 0, 0)
                float m_mass = 0.001

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.6
                double staticFriction = 0.6
            }
        }
    }

    def Cube "floor_3" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/floor_3/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-84.29317, 192.6477)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (37.5, 5, 45)
        float3 xformOp:translate = (-6.25, -0.4001, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/floor_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/floor_3/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @2145.jpg@
                float2 inputs:st.connect = </Root/floor_3/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor_3/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.25, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 1
            float linearDamping = 0.02
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (0, 0, 0)
                float m_mass = 0.001

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.6
                double staticFriction = 0.6
            }
        }
    }

    def Cube "floor_4" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["floor_5", "DefaultMaterial", "Collider", "RigidBody"]
        rel material:binding = </Root/floor_4/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-84.29317, 192.6477)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (47.5, 5, 45)
        float3 xformOp:translate = (5.25, -0.4001, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/floor_4/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/floor_4/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @2145.jpg@
                float2 inputs:st.connect = </Root/floor_4/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor_4/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.25, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 1
            float linearDamping = 0.02
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (0, 0, 0)
                float m_mass = 0.001

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.6
                double staticFriction = 0.6
            }
        }
    }

    def Cube "breakablefloor" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/breakablefloor/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (14.999999, 1, 14.999999)
        float3 xformOp:translate = (-1.0000004, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/breakablefloor/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/breakablefloor/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (353.6982, 108.94482)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 28

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/breakablefloor/DefaultMaterial/diffuseColor.outputs:rgb>
                normal3f inputs:normal = (0, 0, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @floormaterial.jpg@
                float2 inputs:st.connect = </Root/breakablefloor/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/breakablefloor/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "PreviewSurface" (
                active = true
            )
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:clearcoat
                float inputs:clearcoatRoughness
                color3f inputs:diffuseColor.connect = </Root/breakablefloor/DefaultMaterial/HSVAdjust.outputs:out>
                color3f inputs:emissiveColor
                float inputs:ior
                float inputs:metallic
                float3 inputs:normal
                float inputs:occlusion
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (105.480736, 113.68064)
                int ui:nodegraph:node:stackingOrder = 93
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file = @floormaterial.jpg@
                string inputs:filtertype
                float2 inputs:texcoord.connect = </Root/breakablefloor/DefaultMaterial/Transform2D.outputs:out>
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-381.6375, 103.07825)
                int ui:nodegraph:node:stackingOrder = 78
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out", "inputs:texcoord"]
            }

            def Shader "Transform2D"
            {
                uniform token info:id = "ND_UsdTransform2d"
                float2 inputs:in.connect = </Root/breakablefloor/DefaultMaterial/TextureCoordinates.outputs:out>
                float inputs:rotation
                float2 inputs:scale = (0.5, 0.33)
                float2 inputs:translation = (0, -0.002)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-602.2608, 137.07855)
                int ui:nodegraph:node:stackingOrder = 113
            }

            def Shader "TextureCoordinates"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-841.69653, 108.06333)
                int ui:nodegraph:node:stackingOrder = 74
            }

            def Shader "HSVAdjust"
            {
                uniform token info:id = "ND_hsvadjust_color3"
                float3 inputs:amount = (360, 1, 1)
                color3f inputs:in.connect = </Root/breakablefloor/DefaultMaterial/Image.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-100.522606, 104.85935)
                int ui:nodegraph:node:stackingOrder = 118
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 1
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                float m_mass = 0.001

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.6
                double staticFriction = 0.6
            }
        }
    }

    def Cube "floor_5" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["breakablefloor", "DefaultMaterial", "Collider", "RigidBody"]
        rel material:binding = </Root/floor_5/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (-64.29317, 212.6477)
        int ui:nodegraph:node:stackingOrder = 4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (20, 2, 20)
        float3 xformOp:translate = (-1, -1.1, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/floor_5/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.082469255, 0.082469255, 0.082469255) (
                    colorSpace = "lin_srgb"
                )
                color3f inputs:diffuseColor.connect = </Root/floor_5/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @Snow004_2K-JPG_Roughness.jpg@
                float2 inputs:st.connect = </Root/floor_5/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor_5/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.25, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 1
            float linearDamping = 0.02
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (0, 0, 0)
                float m_mass = 0.001

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.6
                double staticFriction = 0.6
            }
        }
    }

    def "photoframe" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, -0.69813174, 0)
        }
        references = @Frame_3D.usdz@
    )
    {
        reorder nameChildren = ["secondphoto", "Materials", "Meshes"]
        quatf xformOp:orient = (0.9396926, 0, -0.34202012, 0)
        float3 xformOp:scale = (0.005, 0.005, 0.005)
        float3 xformOp:translate = (-9.014825, 4.63443, -3.5868943)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            reorder nameChildren = ["Material_001", "Material_002_", "frame", "glass", "Metallic", "cardboard"]
            over "Material_001"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "pbr_shader"
                {
                    color3f inputs:diffuseColor.connect = </Root/photoframe/Materials/Material_001/diffuseColor.outputs:rgb>
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @photo1.jpg@
                    float2 inputs:st.connect = </Root/photoframe/Materials/Material_001/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/photoframe/Materials/Material_001.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            over "frame"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "glass"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "pbr_shader"
                {
                    float inputs:metallic = 1
                    float inputs:opacity = 0.15
                }
            }
        }

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "root"
                {
                    over "GLTF_SceneRootNode"
                    {
                        over "Plane_0"
                        {
                            quatf xformOp:orient = (0.59441227, 0, 0, 0.8041604)
                            float3 xformOp:scale = (1, 1, 1)
                            float3 xformOp:translate = (0.2140615, 1.3318932, 0)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                        }

                        over "Plane_001_1"
                        {
                            quatf xformOp:orient = (0.59441227, 0, 0, 0.8041604)
                            float3 xformOp:scale = (1, 1, 1)
                            float3 xformOp:translate = (0.2140615, 1.3318932, -0.0032769525)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                        }

                        over "Plane_002_2"
                        {
                            quatf xformOp:orient = (0.59441227, 0, 0, 0.8041604)
                            float3 xformOp:scale = (1.0118885, 1.0118885, 1.0118885)
                            float3 xformOp:translate = (0.22100092, 1.3340225, 0)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                        }
                    }
                }
            }
        }

        def Cube "secondphoto" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.2740905, 1.5707963, 0)
            }
        )
        {
            rel material:binding = </Root/photoframe/secondphoto/DefaultMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            quatf xformOp:orient = (0.5684126, 0.42060328, 0.56841266, -0.42060325)
            float3 xformOp:scale = (1000, 0.32500002, 1290)
            float3 xformOp:translate = (21.522827, 133.39087, -0.007019043)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/photoframe/secondphoto/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0, 0, 0) (
                        colorSpace = "lin_srgb"
                    )
                    color3f inputs:diffuseColor.connect = </Root/photoframe/secondphoto/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @photo2_.jpg@
                    float2 inputs:st.connect = </Root/photoframe/secondphoto/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/photoframe/secondphoto/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }
    }

    def "cockroach" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.9198616, 0)
        }
        references = @Cockroach.usdz@
    )
    {
        quatf xformOp:orient = (0.5735766, 0, 0.8191519, 0)
        float3 xformOp:scale = (0.0015, 0.0015, 0.0015)
        float3 xformOp:translate = (-8.197012, 3.6577759, -0.23353699)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "iphone" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.34906587, -4.4703484e-8, 1.1178406)
        }
        references = @iphone.usdz@
    )
    {
        quatf xformOp:orient = (0.8349477, 0.14722383, 0.09208061, 0.5222151)
        float3 xformOp:scale = (0.004, 0.004, 0.004)
        float3 xformOp:translate = (-8.234035, 3.8582332, -0.24072005)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "root"
                {
                    over "GLTF_SceneRootNode"
                    {
                        over "Iphone_001_1" (
                            active = false
                        )
                        {
                        }
                    }
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (13.40307, 219.7323, 108.605606)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-1.2266798, -0.0000038146973, 0.13624)
                }
            }
        }
    }

    def "Snacksinabox" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0, 1.5707964)
        }
        references = @Snacksinabox.usdz@
    )
    {
        quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
        float3 xformOp:scale = (0.006, 0.006, 0.006)
        float3 xformOp:translate = (-7.7409067, 3.783023, -0.85847414)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "DirectionalLight" (
        active = false
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.0000022176582, 18.500002, 0.0000011920931)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "DirectionalLight"
        {
            token info:id = "RealityKit.DirectionalLight"
            float intensity = 5000

            def RealityKitStruct "Shadow"
            {
                float depthBias = 2
                bool isEnabled = 1
                float maximumDistance = 100
                token projectionType = "Automatic"
            }
        }
    }

    def "window_animated" (
        active = true
        references = @Animated_Window_Systems.usdz@
    )
    {
        float3 xformOp:scale = (0.06, 0.06, 0.06)
        float3 xformOp:translate = (-8.163747, 39.55093, 48.6)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "c6e3e68a8e60493d934f2d46f3ca3045_fbx"
                {
                    over "Object_2"
                    {
                        over "RootNode"
                        {
                            quatf xformOp:orient = (1, 0, 0, 0)
                            float3 xformOp:scale = (1, 1, 1)
                            float3 xformOp:translate = (341.02063, -1599.9602, -1789.0922)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                            over "fixed" (
                                active = false
                            )
                            {
                            }

                            over "fixed_lattice" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fincontrol" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_frame" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin1" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin2" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin3" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin4" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin5" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin6" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin7" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin8" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_finc9" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin10" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin11" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin12" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin13" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin14" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin15" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin16" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin17" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_narrow_fin18" (
                                active = false
                            )
                            {
                            }

                            over "Jalousie_wide_fincontrol"
                            {
                            }

                            over "Jalousie_wide_frame"
                            {
                            }

                            over "Jalousie_wide_fin1"
                            {
                            }

                            over "Jalousie_wide_fin2"
                            {
                            }

                            over "Jalousie_wide_fin3"
                            {
                            }

                            over "Jalousie_wide_fin4"
                            {
                            }

                            over "Jalousie_wide_fin5"
                            {
                            }

                            over "Jalousie_wide_fin6"
                            {
                            }

                            over "Jalousie_wide_fin7"
                            {
                            }

                            over "Jalousie_wide_fin8"
                            {
                            }

                            over "Jalousie_wide_fin9"
                            {
                            }

                            over "sliding_vertical_frame" (
                                active = false
                            )
                            {
                            }

                            over "sliding_vertical_windowT" (
                                active = false
                            )
                            {
                            }

                            over "sliding_vertical_windowB" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_frame" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_windowL" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_windowR" (
                                active = false
                            )
                            {
                            }

                            over "holding_frame" (
                                active = false
                            )
                            {
                            }

                            over "holding_panels" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_4panels_frame" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_4panels_windowL2" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_4panels_windowL1" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_4panels_windowR1" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_4panels_windowR2" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_lattice_frame" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_lattice_windowL" (
                                active = false
                            )
                            {
                            }

                            over "sliding_horizontal_lattice_windowR" (
                                active = false
                            )
                            {
                            }

                            over "casement_frame" (
                                active = false
                            )
                            {
                            }

                            over "casement_panelL" (
                                active = false
                            )
                            {
                            }

                            over "casement_panelR" (
                                active = false
                            )
                            {
                            }

                            over "casement_bridged_frame" (
                                active = false
                            )
                            {
                            }

                            over "casement_bridged_panelL" (
                                active = false
                            )
                            {
                            }

                            over "casement_bridged_panelR" (
                                active = false
                            )
                            {
                            }

                            over "awning_frame" (
                                active = false
                            )
                            {
                            }

                            over "awning_armature" (
                                active = false
                            )
                            {
                            }

                            over "awning_lattice_frame" (
                                active = false
                            )
                            {
                            }

                            over "awning_lattice_armature" (
                                active = false
                            )
                            {
                            }

                            over "pivoting_panel" (
                                active = false
                            )
                            {
                            }

                            over "pivoting_frame" (
                                active = false
                            )
                            {
                            }

                            over "pivoting_handle" (
                                active = false
                            )
                            {
                            }

                            over "pivoting_lattice_window" (
                                active = false
                            )
                            {
                            }

                            over "pivoting_lattice_panel" (
                                active = false
                            )
                            {
                            }

                            over "pivoting_lattice_frame" (
                                active = false
                            )
                            {
                            }

                            over "revolving_frame" (
                                active = false
                            )
                            {
                            }

                            over "revolving_door" (
                                active = false
                            )
                            {
                            }

                            over "sliding_vertical_lattice_windowT" (
                                active = false
                            )
                            {
                                quatf xformOp:orient = (0.7071067, -0.7071068, 0, 0)
                                float3 xformOp:scale = (100, 100, 100)
                                float3 xformOp:translate = (-167.89592, 1288.5945, -7.4526625)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }

                            over "sliding_vertical_lattice_frame" (
                                active = false
                            )
                            {
                                quatf xformOp:orient = (0.7071067, -0.7071068, 0, 0)
                                float3 xformOp:scale = (100, 100, 100)
                                float3 xformOp:translate = (-167.87091, 1168.4429, -12.5832405)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }

                            over "sliding_vertical_lattice_windowB" (
                                active = false
                            )
                            {
                                over "sliding_vertical_lattice_windowB_glass_0"
                                {
                                    quatf xformOp:orient = (1, 0, 0, 0)
                                    float3 xformOp:scale = (1, 1, 1)
                                    float3 xformOp:translate = (0, 0, 0)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }

                                over "sliding_vertical_lattice_windowB_frame2_0"
                                {
                                }
                            }
                        }
                    }
                }
            }
        }

        over "Materials"
        {
            over "glass"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "pbr_shader"
                {
                    float inputs:opacity = 1
                }
            }
        }

        def RealityKitComponent "AnimationLibrary"
        {
            uniform token info:id = "RealityKit.AnimationLibrary"

            def RealityKitClipDefinition "Clip_default_subtree_animation"
            {
                uniform string[] clipNames = ["open", "close"]
                uniform string sourceAnimationName = "default subtree animation"
                uniform double[] startTimes = [0, 2.021777777777778]
            }
        }
    }

    def "switch_window" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 3.1415927, 0)
        }
        references = @Modern_Light_Switches.usdz@
    )
    {
        quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
        float3 xformOp:scale = (0.06, 0.06, 0.06)
        float3 xformOp:translate = (-4.754751, 7.7500005, 9.909228)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "AnimationLibrary"
        {
            uniform token info:id = "RealityKit.AnimationLibrary"

            def RealityKitClipDefinition "Clip_default_subtree_animation"
            {
                uniform string[] clipNames = ["on", "off"]
                uniform string sourceAnimationName = "default subtree animation"
                uniform double[] startTimes = [0, 0.9650555555555556]
            }
        }

        over "SkinnedMeshes"
        {
            over "Sketchfab_model"
            {
                over "_572851d0f89418da7ff6d56e583ab61_fbx"
                {
                    over "Object_2"
                    {
                        over "RootNode"
                        {
                            over "Object_4"
                            {
                                over "_rootJoint"
                                {
                                    over "skin0"
                                    {
                                        float3 xformOp:translate = (3.6205025, 0, -0.00008010864)
                                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                        over "wallplate_metal_02___Default_0" (
                                            active = false
                                        )
                                        {
                                            float3 xformOp:translate = (0, 0, 0)
                                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                        }

                                        over "wallplate_plastic001_01___Default_0"
                                        {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (13.70947, 21.7433, 5.0248737)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0.041469097, 10.837724, 1.1510781)
                }
            }
        }
    }

    def "switch_light" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
        references = @Modern_Light_Switches.usdz@
    )
    {
        float2 ui:nodegraph:node:pos = (-126.125, 109)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
        float3 xformOp:scale = (0.06, 0.06, 0.06)
        float3 xformOp:translate = (-9.913358, 7.7500005, 1.1543391)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "AnimationLibrary"
        {
            uniform token info:id = "RealityKit.AnimationLibrary"

            def RealityKitClipDefinition "Clip_default_subtree_animation"
            {
                uniform string[] clipNames = ["on", "off"]
                uniform string sourceAnimationName = "default subtree animation"
                uniform double[] startTimes = [0, 0.9650555555555556]
            }
        }

        over "SkinnedMeshes"
        {
            over "Sketchfab_model"
            {
                over "_572851d0f89418da7ff6d56e583ab61_fbx"
                {
                    over "Object_2"
                    {
                        over "RootNode"
                        {
                            over "Object_4"
                            {
                                over "_rootJoint"
                                {
                                    quatf xformOp:orient = (1, 0, 0, 0)
                                    float3 xformOp:scale = (1, 1, 1)
                                    float3 xformOp:translate = (-3.6893997, 0, -0.0002822876)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                    over "skin0"
                                    {
                                        float3 xformOp:translate = (0, 0, 0)
                                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                        over "wallplate_metal_02___Default_0"
                                        {
                                            float3 xformOp:translate = (0, 0, 0)
                                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                        }

                                        over "wallplate_plastic001_01___Default_0" (
                                            active = false
                                        )
                                        {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (13.70947, 21.7433, 5.0248737)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 10.837724, 1.1510781)
                }
            }
        }
    }

    def "Picture_Frame_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 3.1415927, 0)
        }
        references = @Picture_Frame.usdz@
    )
    {
        reorder nameChildren = ["picture", "Materials", "Meshes"]
        float2 ui:nodegraph:node:pos = (-126.125, 109)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        float3 xformOp:translate = (9.949999, 6.8, -0.3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "_D_Oak___Semigloss_001"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "pbr_shader"
                {
                    color3f inputs:diffuseColor = (0.5191068, 0.24338968, 0.04391877)
                }
            }

            over "_D_Oak___Semigloss_004"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "pbr_shader"
                {
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @hint1.jpg@
                    float2 inputs:st.connect = </Root/Picture_Frame_1/Materials/_D_Oak___Semigloss_004/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Picture_Frame_1/Materials/_D_Oak___Semigloss_004.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "root"
                {
                    over "GLTF_SceneRootNode"
                    {
                        over "back_panel_001_2"
                        {
                        }

                        over "frame_001_3"
                        {
                        }
                    }
                }
            }
        }

        def Cube "picture" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 3.1415918, 0)
            }
        )
        {
            rel material:binding = </Root/Picture_Frame_1/picture/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (3.1391647e-7, 0, 1, 0)
            float3 xformOp:scale = (10, 1262, 962)
            float3 xformOp:translate = (5.505371, 149.79724, 120.100006)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Picture_Frame_1/picture/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 0.40577167, 1) (
                        colorSpace = "lin_srgb"
                    )
                    color3f inputs:diffuseColor.connect = </Root/Picture_Frame_1/picture/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @hint2.jpg@
                    float2 inputs:st.connect = </Root/Picture_Frame_1/picture/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Picture_Frame_1/picture/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }
    }

    def "Picture_Frame_2" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 3.1415927, 0)
        }
        references = @Picture_Frame.usdz@
    )
    {
        reorder nameChildren = ["picture", "Materials", "Meshes"]
        float2 ui:nodegraph:node:pos = (-106.125, 129)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        float3 xformOp:translate = (9.949999, 6.8, 3.7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "_D_Oak___Semigloss_001"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "pbr_shader"
                {
                    color3f inputs:diffuseColor = (0.5191068, 0.24338968, 0.04391877)
                }
            }

            over "_D_Oak___Semigloss_004"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "pbr_shader"
                {
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @hint1.jpg@
                    float2 inputs:st.connect = </Root/Picture_Frame_2/Materials/_D_Oak___Semigloss_004/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Picture_Frame_2/Materials/_D_Oak___Semigloss_004.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "root"
                {
                    over "GLTF_SceneRootNode"
                    {
                        over "back_panel_001_2"
                        {
                        }

                        over "frame_001_3"
                        {
                        }
                    }
                }
            }
        }

        def Cube "picture" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 3.1415918, 0)
            }
        )
        {
            rel material:binding = </Root/Picture_Frame_2/picture/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (3.1391647e-7, 0, 1, 0)
            float3 xformOp:scale = (10, 1262, 962)
            float3 xformOp:translate = (5.505371, 149.79724, 120.100006)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Picture_Frame_2/picture/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 0.40577167, 1) (
                        colorSpace = "lin_srgb"
                    )
                    color3f inputs:diffuseColor.connect = </Root/Picture_Frame_2/picture/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @hint3.jpg@
                    float2 inputs:st.connect = </Root/Picture_Frame_2/picture/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Picture_Frame_2/picture/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }
    }

    def "dresserlock" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0.52359885, 0)
        }
        references = @Lock_And_Key.usdz@
    )
    {
        quatf xformOp:orient = (0.9659258, 0, 0.25881904, 0)
        float3 xformOp:scale = (0.013, 0.013, 0.013)
        float3 xformOp:translate = (-7.539296, 3.7508395, -2.0966105)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "fences" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0.52359885, 0)
        }
    )
    {
        reorder nameChildren = ["Fence_Wood", "Fence_Wood_1", "Fence_Wood_2", "Fence_Wood_3", "Fence_Wood_4", "Fence_Wood_5", "Fence_Wood_6", "Fence_Wood_7"]
        quatf xformOp:orient = (0.9659258, 0, 0.25881904, 0)
        float3 xformOp:translate = (-4.6231885, -1.8626454e-7, 43.34521)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Fence_Wood" (
            active = false
            customData = {
                float3 rotationEulerHint = (0, 2.0124054, 0)
            }
            references = @Fence_Wood.usdz@
        )
        {
            quatf xformOp:orient = (0.53507245, 0, 0.8448062, 0)
            float3 xformOp:scale = (0.029999997, 0.03, 0.029999997)
            float3 xformOp:translate = (37.52183, -2.001231, 21.523273)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (-77.82545, 0, -176.02266)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Sketchfab_model"
                {
                    over "fence_obj_cleaner_gles"
                    {
                        over "Object_2"
                        {
                            over "Object_0"
                            {
                                float3 xformOp:scale = (1, 1, 1)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }
        }

        def "Fence_Wood_1" (
            active = false
            customData = {
                float3 rotationEulerHint = (0, 1.6532104, 2.3841858e-7)
            }
            references = @Fence_Wood.usdz@
        )
        {
            float2 ui:nodegraph:node:pos = (-126.125, 109)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (0.67737734, -8.7694616e-8, 0.73563576, 8.0749665e-8)
            float3 xformOp:scale = (0.03, 0.029999996, 0.03)
            float3 xformOp:translate = (28.147345, -2.0012345, 28.483654)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (-77.82545, 0, -176.02266)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Sketchfab_model"
                {
                    over "fence_obj_cleaner_gles"
                    {
                        over "Object_2"
                        {
                            over "Object_0"
                            {
                                float3 xformOp:scale = (1, 1, 1)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }
        }

        def "Fence_Wood_2" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.4221586, 0)
            }
            references = @Fence_Wood.usdz@
        )
        {
            float2 ui:nodegraph:node:pos = (-106.125, 129)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (0.75765795, 0, 0.65265185, 0)
            float3 xformOp:scale = (0.030000003, 0.06, 0.030000003)
            float3 xformOp:translate = (17.102962, -2.0012357, 32.459953)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (-77.82545, 0, -176.02266)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Sketchfab_model"
                {
                    over "fence_obj_cleaner_gles"
                    {
                        over "Object_2"
                        {
                            over "Object_0"
                            {
                                float3 xformOp:scale = (1, 1, 1)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }
        }

        def "Fence_Wood_3" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.0809104, -6.333842e-8)
            }
            references = @Fence_Wood.usdz@
        )
        {
            float2 ui:nodegraph:node:pos = (-106.125, 129)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (0.8574745, 1.6294646e-8, 0.5145264, -2.7155536e-8)
            float3 xformOp:scale = (0.030000005, 0.030000001, 0.030000003)
            float3 xformOp:translate = (5.4973917, -2.0012333, 33.16199)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (-77.82545, 0, -176.02266)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Sketchfab_model"
                {
                    over "fence_obj_cleaner_gles"
                    {
                        over "Object_2"
                        {
                            over "Object_0"
                            {
                                float3 xformOp:scale = (1, 1, 1)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }
        }

        def "Fence_Wood_4" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0.7924502, -1.0611808e-8)
            }
            references = @Fence_Wood.usdz@
        )
        {
            float2 ui:nodegraph:node:pos = (-86.125, 149)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (0.92252445, 2.0477535e-9, 0.38593864, -4.8948268e-9)
            float3 xformOp:scale = (0.03, 0.030000001, 0.030000001)
            float3 xformOp:translate = (-5.762208, -2.0012333, 30.10804)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (-77.82545, 0, -176.02266)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Sketchfab_model"
                {
                    over "fence_obj_cleaner_gles"
                    {
                        over "Object_2"
                        {
                            over "Object_0"
                            {
                                float3 xformOp:scale = (1, 1, 1)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }
        }

        def "Fence_Wood_5" (
            active = true
            customData = {
                float3 rotationEulerHint = (-2.5552888e-16, 0.5176977, 8.574125e-9)
            }
            references = @Fence_Wood.usdz@
        )
        {
            float2 ui:nodegraph:node:pos = (-86.125, 149)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (0.9666853, -1.0973502e-9, 0.25596783, 4.14424e-9)
            float3 xformOp:scale = (0.030000001, 0.06, 0.030000005)
            float3 xformOp:translate = (-15.719426, -2.0012357, 23.98051)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (-77.82545, 0, -176.02266)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Sketchfab_model"
                {
                    over "fence_obj_cleaner_gles"
                    {
                        over "Object_2"
                        {
                            over "Object_0"
                            {
                                float3 xformOp:scale = (1, 1, 1)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }
        }

        def "Fence_Wood_6" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0.26861027, -3.8638452e-9)
            }
            references = @Fence_Wood.usdz@
        )
        {
            float2 ui:nodegraph:node:pos = (-66.125, 169)
            int ui:nodegraph:node:stackingOrder = 4
            quatf xformOp:orient = (0.99099463, 2.5868754e-10, 0.1339016, -1.9145237e-9)
            float3 xformOp:scale = (0.030000001, 0.030000001, 0.030000003)
            float3 xformOp:translate = (-23.843348, -2.0012333, 15.528656)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (-77.82545, 0, -176.02266)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Sketchfab_model"
                {
                    over "fence_obj_cleaner_gles"
                    {
                        over "Object_2"
                        {
                            over "Object_0"
                            {
                                float3 xformOp:scale = (1, 1, 1)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }
        }

        def "Fence_Wood_7" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, -0.0552042, 0)
            }
            references = @Fence_Wood.usdz@
        )
        {
            float2 ui:nodegraph:node:pos = (-66.125, 169)
            int ui:nodegraph:node:stackingOrder = 4
            quatf xformOp:orient = (0.99961907, 0, -0.027599307, 0)
            float3 xformOp:scale = (0.030000003, 0.06, 0.03)
            float3 xformOp:translate = (-29.157274, -2.0012357, 5.2316895)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (-77.82545, 0, -176.02266)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Sketchfab_model"
                {
                    over "fence_obj_cleaner_gles"
                    {
                        over "Object_2"
                        {
                            over "Object_0"
                            {
                                float3 xformOp:scale = (1, 1, 1)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }
        }
    }

    def "Pine_tree" (
        active = true
        references = @Pine_tree.usdz@
    )
    {
        float3 xformOp:scale = (0.05, 0.05, 0.05)
        float3 xformOp:translate = (-47.281654, -2.0000002, 54.09887)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Pine_tree_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
        references = @Pine_tree.usdz@
    )
    {
        float2 ui:nodegraph:node:pos = (-126.125, 109)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
        float3 xformOp:scale = (0.05, 0.05, 0.05)
        float3 xformOp:translate = (26.298647, -5.8702903, 117.98405)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Rock" (
        active = true
        references = @Rock.usdz@
    )
    {
        float3 xformOp:scale = (0.07, 0.07, 0.07)
        float3 xformOp:translate = (20.21822, -0.7781847, 110.446815)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Rock_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 2.6783545, 0)
        }
        references = @Rock.usdz@
    )
    {
        quatf xformOp:orient = (0.22955358, 0, 0.973296, 0)
        float3 xformOp:scale = (0.1, 0.1, 0.12)
        float3 xformOp:translate = (32.349678, 2.0632653, 37.969868)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Poster_Basic__Low_Poly" (
        active = true
        references = @Poster_Basic__Low_Poly.usdz@
    )
    {
        float3 xformOp:scale = (0.016, 0.008, 0.008)
        float3 xformOp:translate = (-1.0964534, 6.2510476, -9.891981)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "Paper_Material"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "pbr_shader"
                {
                    color3f inputs:diffuseColor.connect = </Root/Poster_Basic__Low_Poly/Materials/Paper_Material/diffuseColor.outputs:rgb>
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @binarytable.png@
                    float2 inputs:st.connect = </Root/Poster_Basic__Low_Poly/Materials/Paper_Material/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Poster_Basic__Low_Poly/Materials/Paper_Material.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            over "Material_001"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }
        }

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "da03915a871f41d8bf8134affa9a6448_fbx"
                {
                    over "RootNode"
                    {
                        over "Tape_L"
                        {
                            quatf xformOp:orient = (0.65447104, -0.65447104, -0.26770815, -0.26770812)
                            float3 xformOp:scale = (20, 10.582916, 125)
                            float3 xformOp:translate = (-150.5843, 0.7531739, 111.93383)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                        }

                        over "Tape_R"
                        {
                            quatf xformOp:orient = (-0.32764134, 0.32764134, 0.62661886, 0.62661886)
                            float3 xformOp:scale = (20, 10.5824995, 125)
                            float3 xformOp:translate = (-152.2477, 3.2272952, -112.55375)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                        }
                    }
                }
            }
        }
    }

    def "lighter" (
        active = true
        customData = {
            float3 rotationEulerHint = (5.7735242e-8, -5.9604645e-8, -1.5707964)
        }
        references = @Hammer.usdz@
    )
    {
        reorder nameChildren = ["lighter_", "Materials_1", "Meshes_1", "Materials", "Meshes", "InputTarget", "Collider", "RigidBody"]
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (0.70710677, -6.505747e-10, -4.1475552e-8, -0.70710677)
        float3 xformOp:scale = (0.05, 0.05, 0.05)
        float3 xformOp:translate = (-6.9567513, 1.9416677, -7.5866036)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (3, 15, 8)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0.67669624, 0.90192986, -0.4724717)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 1
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 1
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1

            def RealityKitStruct "massFrame"
            {
                float3 m_inertia = (0.01, 0.01, 0.01)
                float m_mass = 0.1

                def RealityKitStruct "m_pose"
                {
                    quatf orientation = (1, 0, 0, 0)
                    float3 position = (0, 0, 0)
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.8
                double restitution = 0
                double staticFriction = 0.8
            }
        }

        over "Meshes" (
            active = false
        )
        {
        }

        over "Materials" (
            active = false
        )
        {
        }

        def Scope "Materials_1" (
            references = </Root/lighter/lighter_/Materials>
        )
        {
            reorder nameChildren = ["lambert4SG", "lambert2SG", "lighter_"]
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1

            def Material "lambert4SG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/lighter/Materials_1/lambert4SG/pbr_shader.outputs:surface>

                def Shader "pbr_shader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor.connect = </Root/lighter/Materials_1/lambert4SG/tex_base.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:metallic.connect = </Root/lighter/Materials_1/lambert4SG/tex_metallic.outputs:r>
                    normal3f inputs:normal.connect = </Root/lighter/Materials_1/lambert4SG/tex_normal.outputs:rgb>
                    float inputs:occlusion = 1
                    float inputs:roughness.connect = </Root/lighter/Materials_1/lambert4SG/tex_roughness.outputs:r>
                    token outputs:surface
                }

                def Shader "uvset0"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st0"
                    float2 outputs:result
                }

                def Shader "tex_base"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:fallback = (1, 1, 1, 1)
                    asset inputs:file
                    float2 inputs:st.connect = </Root/lighter/Materials_1/lambert4SG/uvset0.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:a
                    float3 outputs:rgb
                }

                def Shader "tex_metallic"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:fallback = (0, 0, 0, 1)
                    asset inputs:file
                    float2 inputs:st.connect = </Root/lighter/Materials_1/lambert4SG/uvset0.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "tex_roughness"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:fallback = (1, 0, 0, 1)
                    asset inputs:file
                    float2 inputs:st.connect = </Root/lighter/Materials_1/lambert4SG/uvset0.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "tex_normal"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, -1, -1, -1)
                    float4 inputs:fallback = (0, 0, 1, 1)
                    asset inputs:file
                    float4 inputs:scale = (2, 2, 2, 2)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </Root/lighter/Materials_1/lambert4SG/uvset0.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }
            }

            def Material "lambert2SG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/lighter/Materials_1/lambert2SG/pbr_shader.outputs:surface>

                def Shader "pbr_shader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor.connect = </Root/lighter/Materials_1/lambert2SG/tex_base.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:metallic.connect = </Root/lighter/Materials_1/lambert2SG/tex_metallic.outputs:r>
                    normal3f inputs:normal.connect = </Root/lighter/Materials_1/lambert2SG/tex_normal.outputs:rgb>
                    float inputs:occlusion = 1
                    float inputs:roughness.connect = </Root/lighter/Materials_1/lambert2SG/tex_roughness.outputs:r>
                    token outputs:surface
                }

                def Shader "uvset0"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st0"
                    float2 outputs:result
                }

                def Shader "tex_base"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:fallback = (1, 1, 1, 1)
                    asset inputs:file
                    float2 inputs:st.connect = </Root/lighter/Materials_1/lambert2SG/uvset0.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:a
                    float3 outputs:rgb
                }

                def Shader "tex_metallic"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:fallback = (0, 0, 0, 1)
                    asset inputs:file
                    float2 inputs:st.connect = </Root/lighter/Materials_1/lambert2SG/uvset0.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "tex_roughness"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:fallback = (1, 0, 0, 1)
                    asset inputs:file
                    float2 inputs:st.connect = </Root/lighter/Materials_1/lambert2SG/uvset0.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "tex_normal"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, -1, -1, -1)
                    float4 inputs:fallback = (0, 0, 1, 1)
                    asset inputs:file
                    float4 inputs:scale = (2, 2, 2, 2)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </Root/lighter/Materials_1/lambert2SG/uvset0.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }
            }
        }

        def Xform "Meshes_1" (
            references = </Root/lighter/lighter_/Meshes>
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (0.7070198, 0.0110900225, 0.70701975, -0.0110900635)
            float3 xformOp:scale = (5.9999995, 5.9999986, 5.9999986)
            float3 xformOp:translate = (0.52775294, 0.9157143, -0.7191697)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "Sketchfab_model"
            {
                matrix4d xformOp:transform = ( (0.999927818775177, -0.011547588743269444, 0.003322499804198742, 0), (0.003223351202905178, -0.008594132028520107, -0.9999578595161438, 0), (0.01157565601170063, 0.9998964071273804, -0.008556289598345757, 0), (-0.04083841294050217, 0.00002652305738592986, 0.02538314275443554, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "Collada_visual_scene_group"
                {
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -4.371138828673793e-8, 1, 0), (0, -1, -4.371138828673793e-8, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "g"
                    {
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Xform "defaultMaterial"
                        {
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Mesh "defaultMaterial" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                uniform bool doubleSided = 1
                                float3[] extent = [(-0.135108, 0.741754, -0.11279), (0.12314, 1, 0.109168)]
                                int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                                int[] faceVertexIndices = [3, 0, 1, 1, 2, 3, 6, 1, 4, 4, 5, 6, 5, 4, 7, 7, 8, 5, 8, 7, 9, 9, 10, 8, 10, 9, 11, 11, 12, 10, 12, 11, 13, 13, 14, 12, 17, 13, 15, 15, 16, 17, 16, 15, 18, 18, 19, 16, 22, 18, 20, 20, 21, 22, 21, 20, 23, 23, 24, 21, 24, 23, 25, 25, 26, 24, 29, 25, 27, 27, 28, 29, 28, 27, 30, 30, 31, 28, 31, 30, 32, 32, 33, 31, 33, 34, 35, 35, 36, 33, 36, 37, 38, 38, 39, 36, 42, 38, 40, 40, 41, 42, 41, 40, 43, 43, 44, 41, 44, 43, 45, 45, 46, 44, 46, 47, 48, 48, 49, 46, 52, 50, 51, 51, 1, 52, 56, 53, 54, 54, 55, 56, 1, 51, 57, 57, 58, 1, 61, 59, 53, 53, 60, 61, 63, 57, 62, 62, 7, 63, 8, 64, 59, 59, 65, 8, 7, 62, 66, 66, 9, 7, 68, 67, 64, 64, 8, 68, 9, 66, 69, 69, 70, 9, 73, 71, 67, 67, 72, 73, 76, 69, 74, 74, 75, 76, 17, 77, 71, 71, 73, 17, 79, 74, 78, 78, 15, 79, 16, 80, 77, 77, 81, 16, 15, 78, 82, 82, 83, 15, 85, 84, 80, 80, 16, 85, 88, 82, 86, 86, 87, 88, 21, 89, 84, 84, 90, 21, 92, 86, 91, 91, 23, 92, 24, 93, 89, 89, 21, 24, 23, 91, 94, 94, 25, 23, 29, 95, 93, 93, 24, 29, 25, 94, 96, 96, 27, 25, 28, 97, 95, 95, 98, 28, 27, 96, 99, 99, 30, 27, 31, 100, 97, 97, 28, 31, 30, 99, 101, 101, 34, 30, 103, 102, 100, 100, 31, 103, 34, 101, 104, 104, 105, 34, 36, 106, 102, 102, 107, 36, 35, 104, 108, 108, 109, 35, 42, 110, 106, 106, 36, 42, 112, 108, 111, 111, 40, 112, 41, 113, 110, 110, 114, 41, 40, 111, 115, 115, 43, 40, 44, 116, 113, 113, 41, 44, 43, 115, 117, 117, 118, 43, 120, 119, 116, 116, 44, 120, 122, 117, 121, 121, 48, 122, 125, 123, 119, 119, 124, 125, 129, 126, 127, 127, 128, 129, 131, 127, 126, 126, 130, 131, 133, 131, 130, 130, 132, 133, 135, 133, 132, 132, 134, 135, 137, 135, 134, 134, 136, 137, 139, 137, 136, 136, 138, 139, 141, 139, 138, 138, 140, 141, 143, 141, 140, 140, 142, 143, 145, 143, 142, 142, 144, 145, 147, 145, 144, 144, 146, 147, 149, 147, 146, 146, 148, 149, 151, 149, 148, 148, 150, 151, 153, 151, 150, 150, 152, 153, 155, 153, 152, 152, 154, 155, 157, 155, 154, 154, 156, 157, 159, 157, 156, 156, 158, 159, 161, 159, 158, 158, 160, 161, 163, 161, 160, 160, 162, 163, 165, 163, 162, 162, 164, 165, 128, 165, 164, 164, 129, 128, 169, 166, 167, 167, 168, 169, 171, 167, 166, 166, 170, 171, 173, 169, 168, 168, 172, 173, 175, 173, 172, 172, 174, 175, 177, 175, 174, 174, 176, 177, 179, 177, 176, 176, 178, 179, 181, 179, 178, 178, 180, 181, 183, 181, 180, 180, 182, 183, 185, 183, 182, 182, 184, 185, 187, 185, 184, 184, 186, 187, 189, 187, 186, 186, 188, 189, 191, 189, 188, 188, 190, 191, 193, 191, 190, 190, 192, 193, 195, 193, 192, 192, 194, 195, 197, 195, 194, 194, 196, 197, 199, 197, 196, 196, 198, 199, 201, 199, 198, 198, 200, 201, 203, 201, 200, 200, 202, 203, 205, 203, 202, 202, 204, 205, 170, 205, 204, 204, 171, 170, 132, 130, 126, 126, 206, 132, 136, 134, 132, 132, 206, 136, 140, 138, 136, 136, 206, 140, 144, 142, 140, 140, 206, 144, 148, 146, 144, 144, 206, 148, 152, 150, 148, 148, 206, 152, 156, 154, 152, 152, 206, 156, 160, 158, 156, 156, 206, 160, 164, 162, 160, 160, 206, 164, 126, 129, 164, 164, 206, 126, 173, 207, 166, 166, 169, 173, 177, 207, 173, 173, 175, 177, 181, 207, 177, 177, 179, 181, 185, 207, 181, 181, 183, 185, 189, 207, 185, 185, 187, 189, 193, 207, 189, 189, 191, 193, 197, 207, 193, 193, 195, 197, 201, 207, 197, 197, 199, 201, 205, 207, 201, 201, 203, 205, 166, 207, 205, 205, 170, 166, 50, 208, 209, 209, 51, 50, 53, 210, 211, 211, 54, 53, 51, 209, 212, 212, 57, 51, 59, 213, 210, 210, 53, 59, 57, 212, 214, 214, 62, 57, 64, 215, 213, 213, 59, 64, 62, 214, 216, 216, 66, 62, 67, 217, 215, 215, 64, 67, 66, 216, 218, 218, 69, 66, 71, 219, 217, 217, 67, 71, 69, 218, 220, 220, 74, 69, 77, 221, 219, 219, 71, 77, 74, 220, 222, 222, 78, 74, 80, 223, 221, 221, 77, 80, 78, 222, 224, 224, 82, 78, 84, 225, 223, 223, 80, 84, 82, 224, 226, 226, 86, 82, 89, 227, 225, 225, 84, 89, 86, 226, 228, 228, 91, 86, 93, 229, 227, 227, 89, 93, 91, 228, 230, 230, 94, 91, 95, 231, 229, 229, 93, 95, 94, 230, 232, 232, 96, 94, 97, 233, 231, 231, 95, 97, 96, 232, 234, 234, 99, 96, 100, 235, 233, 233, 97, 100, 99, 234, 236, 236, 101, 99, 102, 237, 235, 235, 100, 102, 101, 236, 238, 238, 104, 101, 106, 239, 237, 237, 102, 106, 104, 238, 240, 240, 108, 104, 110, 241, 239, 239, 106, 110, 108, 240, 242, 242, 111, 108, 113, 243, 241, 241, 110, 113, 111, 242, 244, 244, 115, 111, 116, 245, 243, 243, 113, 116, 115, 244, 246, 246, 117, 115, 119, 247, 245, 245, 116, 119, 117, 246, 248, 248, 121, 117, 123, 249, 247, 247, 119, 123]
                                rel material:binding = </Root/lighter/Materials_1/lambert4SG> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                                normal3f[] normals = [(0.9468971, -0.30766502, -0.093425006), (0.80547786, -0.5852159, -0.093421996), (0.8054801, -0.58521706, 0.09339601), (0.9468998, -0.30766594, 0.09339498), (0.58521676, -0.8054777, -0.09341897), (0.585218, -0.805479, 0.0934), (0.8054801, -0.58521706, 0.09339601), (0.30766502, -0.9468981, -0.09341501), (0.30766597, -0.9468989, 0.093403995), (-0, -0.9956279, -0.093408994), (0, -0.9956279, 0.093408994), (-0.30766597, -0.9468989, -0.093403995), (-0.30766502, -0.9468981, 0.09341501), (-0.585218, -0.805479, -0.0934), (-0.58521724, -0.8054773, 0.09342003), (-0.80548215, -0.58521414, -0.09339702), (-0.8054799, -0.58521295, 0.093422994), (-0.58521724, -0.8054773, 0.09342003), (-0.9468995, -0.3076668, -0.09339495), (-0.9468966, -0.30766588, 0.09342597), (-0.99562913, 0, -0.09339501), (-0.9956262, 0, 0.093427025), (-0.9468966, -0.30766588, 0.09342597), (-0.94689924, 0.30766705, -0.09339602), (-0.9468966, 0.30766588, 0.09342597), (-0.805483, 0.585213, -0.093397), (-0.8054807, 0.58521175, 0.09342397), (-0.58521795, 0.8054789, -0.09340099), (-0.58521724, 0.8054773, 0.09342003), (-0.8054807, 0.58521175, 0.09342397), (-0.30766594, 0.94689876, -0.09340498), (-0.30766502, 0.9468981, 0.09341501), (-0, 0.9956279, -0.093408994), (0, 0.9956279, 0.093408994), (-0, 0.9956279, -0.093408994), (0.30766502, 0.9468981, -0.09341501), (0.30766597, 0.9468989, 0.093403995), (0.30766502, 0.9468981, -0.09341501), (0.5852167, 0.8054776, -0.093419954), (0.5852181, 0.8054791, 0.09339901), (0.80547917, 0.58521414, -0.093422025), (0.8054818, 0.58521485, 0.09339598), (0.5852181, 0.8054791, 0.09339901), (0.9468971, 0.30766502, -0.093425006), (0.9468998, 0.30766594, 0.09339498), (0.9956262, 0.0000010000002, -0.09342602), (0.9956294, 0.0000010000003, 0.09339303), (0.9956262, 0.0000010000002, -0.09342602), (0.9468971, -0.30766502, -0.093425006), (0.9468998, -0.30766594, 0.09339498), (0.93074167, -0.3024169, -0.20558192), (0.7917352, -0.57523215, -0.20558104), (0.9468971, -0.30766502, -0.093425006), (0.7917386, -0.5752327, 0.2055659), (0.93074566, -0.3024169, 0.20556393), (0.9468998, -0.30766594, 0.09339498), (0.8054801, -0.58521706, 0.09339601), (0.5752307, -0.79173666, -0.2055789), (0.58521676, -0.8054777, -0.09341897), (0.57523406, -0.79173714, 0.20556803), (0.8054801, -0.58521706, 0.09339601), (0.585218, -0.805479, 0.0934), (0.30241612, -0.93074334, -0.20557608), (0.58521676, -0.8054777, -0.09341897), (0.3024201, -0.93074334, 0.20557007), (0.585218, -0.805479, 0.0934), (-0.000002, -0.978642, -0.205572), (0.0000019999993, -0.9786416, 0.20557393), (0, -0.9956279, 0.093408994), (-0.30241895, -0.93074375, -0.20556995), (-0.30766597, -0.9468989, -0.093403995), (-0.3024149, -0.93074363, 0.20557593), (0, -0.9956279, 0.093408994), (-0.30766502, -0.9468981, 0.09341501), (-0.57523394, -0.7917369, -0.20556897), (-0.585218, -0.805479, -0.0934), (-0.30766597, -0.9468989, -0.093403995), (-0.57522994, -0.7917369, 0.20557997), (-0.79174054, -0.57522964, -0.20556688), (-0.585218, -0.805479, -0.0934), (-0.7917359, -0.57522994, 0.20558397), (-0.58521724, -0.8054773, 0.09342003), (-0.9307451, -0.30241802, -0.20556504), (-0.9468995, -0.3076668, -0.09339495), (-0.9307404, -0.30241814, 0.2055861), (-0.9468966, -0.30766588, 0.09342597), (-0.9786435, 0, -0.20556511), (-0.99562913, 0, -0.09339501), (-0.9468995, -0.3076668, -0.09339495), (-0.9786391, 0, 0.20558603), (-0.9468966, -0.30766588, 0.09342597), (-0.9307449, 0.30241796, -0.20556597), (-0.99562913, 0, -0.09339501), (-0.93074024, 0.30241805, 0.20558704), (-0.7917407, 0.5752288, -0.20556892), (-0.7917363, 0.57522917, 0.20558508), (-0.5752339, 0.79173684, -0.20556995), (-0.5752302, 0.7917363, 0.20558207), (-0.8054807, 0.58521175, 0.09342397), (-0.30241793, 0.93074375, -0.20557095), (-0.30241388, 0.93074363, 0.20557792), (-0.0000019999998, 0.97864187, -0.20557296), (0.0000019999998, 0.97864187, 0.20557296), (0, 0.9956279, 0.093408994), (0.30241483, 0.93074346, -0.20557688), (0.30766502, 0.9468981, -0.09341501), (0.30241895, 0.93074375, 0.20556995), (0, 0.9956279, 0.093408994), (0.57523006, 0.79173714, -0.20557903), (0.5852167, 0.8054776, -0.093419954), (0.57523406, 0.79173714, 0.20556803), (0.7917358, 0.5752309, -0.20558195), (0.5852167, 0.8054776, -0.093419954), (0.7917399, 0.57523096, 0.20556597), (0.5852181, 0.8054791, 0.09339901), (0.93074167, 0.3024169, -0.20558192), (0.93074566, 0.3024169, 0.20556393), (0.97863966, 9.999997e-7, -0.20558293), (0.9956262, 0.0000010000002, -0.09342602), (0.97864366, 9.999997e-7, 0.20556393), (0.9956294, 0.0000010000003, 0.09339303), (0.93074167, -0.3024169, -0.20558192), (0.9956262, 0.0000010000002, -0.09342602), (0.93074566, -0.3024169, 0.20556393), (0.9956294, 0.0000010000003, 0.09339303), (0.9468998, -0.30766594, 0.09339498), (-0.047481, 0.015431, 0.998753), (0.945833, -0.30732, 0.104663), (0.99449664, 9.999997e-7, 0.10476896), (-0.051356025, -0.0000010000005, 0.9986805), (-0.041546013, 0.03019301, 0.99868035), (0.8045641, -0.58455104, 0.10477001), (-0.029339993, 0.040399987, 0.9987528), (0.58455825, -0.8045723, 0.10466704), (-0.015862, 0.048854, 0.99868), (0.30731687, -0.94582164, 0.10477496), (0.000012000006, 0.04993702, 0.9987525), (0.000001, -0.994507, 0.10467), (0.015884994, 0.048853982, 0.99867964), (-0.30731598, -0.9458219, 0.10477599), (0.029364003, 0.040400002, 0.9987521), (-0.5845571, -0.80457217, 0.10467402), (0.041570015, 0.03019401, 0.99867934), (-0.8045646, -0.5845484, 0.10478108), (0.047504988, 0.015431996, 0.99875176), (-0.9458311, -0.30732104, 0.104677014), (0.05138101, 0, 0.9986792), (-0.9944952, 0, 0.10478202), (0.047504988, -0.015431996, 0.99875176), (-0.9458311, 0.30732104, 0.104677014), (0.041570015, -0.03019401, 0.99867934), (-0.8045649, 0.58454794, 0.10478099), (0.029364003, -0.040400002, 0.9987521), (-0.5845571, 0.80457217, 0.10467402), (0.015884994, -0.048853982, 0.99867964), (-0.30731407, 0.94582224, 0.10477802), (0.000012000006, -0.04993702, 0.9987525), (0.000001, 0.994507, 0.10467), (-0.015862, -0.048854, 0.99868), (0.307316, 0.945822, 0.104775), (-0.029340992, -0.04039899, 0.9987528), (0.5845581, 0.80457217, 0.10466802), (-0.041546013, -0.03019301, 0.99868035), (0.80456483, 0.5845499, 0.10477098), (-0.047481, -0.015431, 0.998753), (0.9458329, 0.30731997, 0.10466398), (-0.04750499, 0.015430998, -0.9987519), (0.9458319, -0.30731896, -0.104676984), (0.80456185, -0.58455193, -0.104781985), (-0.04157001, 0.030195007, -0.9986792), (-0.05138101, -0.0000010000002, -0.9986792), (0.9944952, 0.0000010000002, -0.10478302), (0.5845571, -0.80457217, -0.10467402), (-0.029364, 0.040401, -0.998752), (0.3073168, -0.94582146, -0.10477694), (-0.015885994, 0.048853982, -0.99867964), (-0.000001, -0.994507, -0.10467), (-0.000012000006, 0.04993702, -0.9987525), (-0.30731693, -0.94582176, -0.104773976), (0.015862, 0.048854, -0.99868), (-0.5845583, -0.80457234, -0.104666054), (0.029340992, 0.04039899, -0.9987528), (-0.8045657, -0.5845488, -0.10476996), (0.041546013, 0.03019301, -0.99868035), (-0.94583267, -0.3073209, -0.10466396), (0.047481, 0.015431, -0.998753), (-0.99449664, 0, -0.10476896), (0.051356025, 0, -0.9986805), (-0.94583255, 0.3073212, -0.10466406), (0.047481, -0.015431, -0.998753), (-0.80456614, 0.58454806, -0.10477102), (0.041546013, -0.03019301, -0.99868035), (-0.58455825, 0.8045723, -0.10466704), (0.029340992, -0.04039899, -0.9987528), (-0.30731604, 0.9458221, -0.10477401), (0.015862, -0.048854, -0.99868), (-0.000001, 0.994507, -0.10467), (-0.000012000006, -0.04993702, -0.9987525), (0.307315, 0.945822, -0.104778), (-0.015885994, -0.048853982, -0.99867964), (0.5845571, 0.80457217, -0.10467402), (-0.029365, -0.0404, -0.998752), (0.80456316, 0.58455014, -0.10478202), (-0.041570015, -0.03019401, -0.99867934), (0.9458319, 0.30731896, -0.104676984), (-0.04750599, -0.015431996, -0.99875176), (0.000012, -0, 1), (-0.000012, -0, -1), (0.945833, -0.30732, 0.104663), (0.8045641, -0.58455104, 0.10477001), (0.80456185, -0.58455193, -0.104781985), (0.9458319, -0.30731896, -0.104676984), (0.58455825, -0.8045723, 0.10466704), (0.5845571, -0.80457217, -0.10467402), (0.30731687, -0.94582164, 0.10477496), (0.3073168, -0.94582146, -0.10477694), (0.000001, -0.994507, 0.10467), (-0.000001, -0.994507, -0.10467), (-0.30731598, -0.9458219, 0.10477599), (-0.30731693, -0.94582176, -0.104773976), (-0.5845571, -0.80457217, 0.10467402), (-0.5845583, -0.80457234, -0.104666054), (-0.8045646, -0.5845484, 0.10478108), (-0.8045657, -0.5845488, -0.10476996), (-0.9458311, -0.30732104, 0.104677014), (-0.94583267, -0.3073209, -0.10466396), (-0.9944952, 0, 0.10478202), (-0.99449664, 0, -0.10476896), (-0.9458311, 0.30732104, 0.104677014), (-0.94583255, 0.3073212, -0.10466406), (-0.8045649, 0.58454794, 0.10478099), (-0.80456614, 0.58454806, -0.10477102), (-0.5845571, 0.80457217, 0.10467402), (-0.58455825, 0.8045723, -0.10466704), (-0.30731407, 0.94582224, 0.10477802), (-0.30731604, 0.9458221, -0.10477401), (0.000001, 0.994507, 0.10467), (-0.000001, 0.994507, -0.10467), (0.307316, 0.945822, 0.104775), (0.307315, 0.945822, -0.104778), (0.5845581, 0.80457217, 0.10466802), (0.5845571, 0.80457217, -0.10467402), (0.80456483, 0.5845499, 0.10477098), (0.80456316, 0.58455014, -0.10478202), (0.9458329, 0.30731997, 0.10466398), (0.9458319, 0.30731896, -0.104676984), (0.99449664, 9.999997e-7, 0.10476896), (0.9944952, 0.0000010000002, -0.10478302), (0.945833, -0.30732, 0.104663), (0.9458319, -0.30731896, -0.104676984)] (
                                    interpolation = "vertex"
                                )
                                point3f[] points = [(0.106587, 0.834301, 0.0651315), (0.0897744, 0.801306, 0.0651315), (0.0897722, 0.801306, -0.0687561), (0.106584, 0.834301, -0.0687565), (0.0635887, 0.77512, 0.065132), (0.0635865, 0.77512, -0.0687561), (0.0897722, 0.801306, -0.0687561), (0.0305929, 0.758308, 0.0651324), (0.0305911, 0.758308, -0.0687556), (-0.00598327, 0.752515, 0.0651324), (-0.00598505, 0.752515, -0.0687552), (-0.042559, 0.758308, 0.0651329), (-0.0425612, 0.758308, -0.0687547), (-0.0755548, 0.77512, 0.0651333), (-0.075557, 0.77512, -0.0687547), (-0.10174, 0.801306, 0.0651338), (-0.101742, 0.801306, -0.0687543), (-0.075557, 0.77512, -0.0687547), (-0.118552, 0.834301, 0.0651338), (-0.118555, 0.834301, -0.0687543), (-0.124346, 0.870877, 0.0651338), (-0.124348, 0.870877, -0.0687543), (-0.118555, 0.834301, -0.0687543), (-0.118552, 0.907453, 0.0651338), (-0.118555, 0.907453, -0.0687543), (-0.10174, 0.940449, 0.0651338), (-0.101742, 0.940449, -0.0687543), (-0.0755548, 0.966634, 0.0651333), (-0.075557, 0.966634, -0.0687547), (-0.101742, 0.940449, -0.0687543), (-0.042559, 0.983447, 0.0651329), (-0.0425612, 0.983447, -0.0687547), (-0.00598327, 0.98924, 0.0651324), (-0.00598505, 0.98924, -0.0687552), (-0.00598327, 0.98924, 0.0651324), (0.0305929, 0.983447, 0.0651324), (0.0305911, 0.983447, -0.0687556), (0.0305929, 0.983447, 0.0651324), (0.0635887, 0.966634, 0.065132), (0.0635865, 0.966634, -0.0687561), (0.0897744, 0.940449, 0.0651315), (0.0897722, 0.940449, -0.0687561), (0.0635865, 0.966634, -0.0687561), (0.106586, 0.907453, 0.0651315), (0.106584, 0.907453, -0.0687565), (0.112379, 0.870877, 0.0651315), (0.112377, 0.870877, -0.0687565), (0.112379, 0.870877, 0.0651315), (0.106587, 0.834301, 0.0651315), (0.106584, 0.834301, -0.0687565), (0.11682, 0.830976, 0.0632346), (0.0984796, 0.794981, 0.0632346), (0.106587, 0.834301, 0.0651315), (0.0984774, 0.794981, -0.0668591), (0.116818, 0.830976, -0.0668591), (0.106584, 0.834301, -0.0687565), (0.0897722, 0.801306, -0.0687561), (0.0699134, 0.766415, 0.063235), (0.0635887, 0.77512, 0.065132), (0.0699111, 0.766415, -0.0668587), (0.0897722, 0.801306, -0.0687561), (0.0635865, 0.77512, -0.0687561), (0.0339184, 0.748074, 0.063235), (0.0635887, 0.77512, 0.065132), (0.0339157, 0.748074, -0.0668587), (0.0635865, 0.77512, -0.0687561), (-0.00598282, 0.741754, 0.0632355), (-0.00598505, 0.741754, -0.0668582), (-0.00598505, 0.752515, -0.0687552), (-0.045884, 0.748074, 0.0632359), (-0.042559, 0.758308, 0.0651329), (-0.0458863, 0.748074, -0.0668578), (-0.00598505, 0.752515, -0.0687552), (-0.0425612, 0.758308, -0.0687547), (-0.0818795, 0.766415, 0.0632363), (-0.0755548, 0.77512, 0.0651333), (-0.042559, 0.758308, 0.0651329), (-0.0818817, 0.766415, -0.0668573), (-0.110445, 0.794981, 0.0632363), (-0.0755548, 0.77512, 0.0651333), (-0.110447, 0.794981, -0.0668573), (-0.075557, 0.77512, -0.0687547), (-0.128786, 0.830976, 0.0632368), (-0.118552, 0.834301, 0.0651338), (-0.128788, 0.830976, -0.0668569), (-0.118555, 0.834301, -0.0687543), (-0.135106, 0.870877, 0.0632368), (-0.124346, 0.870877, 0.0651338), (-0.118552, 0.834301, 0.0651338), (-0.135108, 0.870877, -0.0668569), (-0.118555, 0.834301, -0.0687543), (-0.128786, 0.910778, 0.0632368), (-0.124346, 0.870877, 0.0651338), (-0.128788, 0.910778, -0.0668569), (-0.110445, 0.946773, 0.0632363), (-0.110447, 0.946773, -0.0668573), (-0.0818795, 0.975339, 0.0632363), (-0.0818817, 0.975339, -0.0668573), (-0.101742, 0.940449, -0.0687543), (-0.045884, 0.99368, 0.0632359), (-0.0458863, 0.99368, -0.0668578), (-0.00598282, 1, 0.0632355), (-0.00598505, 1, -0.0668582), (-0.00598505, 0.98924, -0.0687552), (0.0339184, 0.99368, 0.063235), (0.0305929, 0.983447, 0.0651324), (0.0339157, 0.99368, -0.0668587), (-0.00598505, 0.98924, -0.0687552), (0.0699134, 0.975339, 0.063235), (0.0635887, 0.966634, 0.065132), (0.0699111, 0.975339, -0.0668587), (0.0984796, 0.946773, 0.0632346), (0.0635887, 0.966634, 0.065132), (0.0984774, 0.946773, -0.0668591), (0.0635865, 0.966634, -0.0687561), (0.11682, 0.910778, 0.0632346), (0.116818, 0.910778, -0.0668591), (0.12314, 0.870877, 0.0632341), (0.112379, 0.870877, 0.0651315), (0.123137, 0.870877, -0.0668591), (0.112377, 0.870877, -0.0687565), (0.11682, 0.830976, 0.0632346), (0.112379, 0.870877, 0.0651315), (0.116818, 0.830976, -0.0668591), (0.112377, 0.870877, -0.0687565), (0.106584, 0.834301, -0.0687565), (0.111917, 0.832569, 0.10634), (0.11682, 0.830976, 0.109093), (0.12314, 0.870877, 0.109165), (0.118054, 0.870877, 0.106473), (0.0943652, 0.79797, 0.106474), (0.0984796, 0.794981, 0.109165), (0.066883, 0.770586, 0.106341), (0.0699138, 0.766415, 0.109094), (0.0323468, 0.752911, 0.106475), (0.0339184, 0.748074, 0.109166), (-0.00598282, 0.746911, 0.106342), (-0.00598282, 0.741754, 0.109095), (-0.0443124, 0.752911, 0.106476), (-0.045884, 0.748074, 0.109167), (-0.0788486, 0.770586, 0.106343), (-0.0818795, 0.766415, 0.109095), (-0.106331, 0.79797, 0.106476), (-0.110445, 0.794981, 0.109168), (-0.123882, 0.832569, 0.106343), (-0.128786, 0.830976, 0.109096), (-0.13002, 0.870877, 0.106476), (-0.135106, 0.870877, 0.109168), (-0.123882, 0.909185, 0.106343), (-0.128786, 0.910778, 0.109096), (-0.106331, 0.943784, 0.106476), (-0.110445, 0.946773, 0.109168), (-0.0788486, 0.971168, 0.106343), (-0.0818795, 0.975339, 0.109095), (-0.0443124, 0.988843, 0.106476), (-0.045884, 0.99368, 0.109167), (-0.00598282, 0.994844, 0.106342), (-0.00598282, 1, 0.109095), (0.0323468, 0.988843, 0.106475), (0.0339184, 0.99368, 0.109166), (0.066883, 0.971168, 0.106341), (0.0699138, 0.975339, 0.109094), (0.0943652, 0.943784, 0.106474), (0.0984796, 0.946773, 0.109165), (0.111916, 0.909185, 0.10634), (0.11682, 0.910778, 0.109093), (0.111913, 0.832569, -0.109966), (0.116818, 0.830976, -0.112719), (0.098477, 0.794981, -0.11279), (0.0943626, 0.79797, -0.110099), (0.118051, 0.870877, -0.110099), (0.123137, 0.870877, -0.11279), (0.0699107, 0.766415, -0.112718), (0.0668798, 0.770586, -0.109965), (0.0339157, 0.748074, -0.11279), (0.0323441, 0.752911, -0.110098), (-0.00598549, 0.741754, -0.112717), (-0.00598549, 0.746911, -0.109965), (-0.0458867, 0.748074, -0.112789), (-0.0443151, 0.752911, -0.110097), (-0.0818821, 0.766415, -0.112716), (-0.0788513, 0.770586, -0.109964), (-0.110448, 0.794981, -0.112788), (-0.106334, 0.79797, -0.110096), (-0.128789, 0.830976, -0.112716), (-0.123884, 0.832569, -0.109963), (-0.135108, 0.870877, -0.112787), (-0.130023, 0.870877, -0.110096), (-0.128789, 0.910778, -0.112716), (-0.123884, 0.909185, -0.109963), (-0.110448, 0.946773, -0.112788), (-0.106334, 0.943784, -0.110096), (-0.0818821, 0.975339, -0.112716), (-0.0788513, 0.971168, -0.109964), (-0.0458867, 0.99368, -0.112789), (-0.0443151, 0.988843, -0.110097), (-0.00598549, 1, -0.112717), (-0.00598549, 0.994844, -0.109965), (0.0339157, 0.99368, -0.11279), (0.0323441, 0.988843, -0.110098), (0.0699107, 0.975339, -0.112718), (0.0668798, 0.971168, -0.109965), (0.098477, 0.946773, -0.11279), (0.0943626, 0.943784, -0.110099), (0.116818, 0.910778, -0.112719), (0.111913, 0.909185, -0.109966), (-0.00598282, 0.870877, 0.103142), (-0.00598549, 0.870877, -0.106765), (0.11682, 0.830976, 0.109093), (0.0984796, 0.794981, 0.109165), (0.098477, 0.794981, -0.11279), (0.116818, 0.830976, -0.112719), (0.0699138, 0.766415, 0.109094), (0.0699107, 0.766415, -0.112718), (0.0339184, 0.748074, 0.109166), (0.0339157, 0.748074, -0.11279), (-0.00598282, 0.741754, 0.109095), (-0.00598549, 0.741754, -0.112717), (-0.045884, 0.748074, 0.109167), (-0.0458867, 0.748074, -0.112789), (-0.0818795, 0.766415, 0.109095), (-0.0818821, 0.766415, -0.112716), (-0.110445, 0.794981, 0.109168), (-0.110448, 0.794981, -0.112788), (-0.128786, 0.830976, 0.109096), (-0.128789, 0.830976, -0.112716), (-0.135106, 0.870877, 0.109168), (-0.135108, 0.870877, -0.112787), (-0.128786, 0.910778, 0.109096), (-0.128789, 0.910778, -0.112716), (-0.110445, 0.946773, 0.109168), (-0.110448, 0.946773, -0.112788), (-0.0818795, 0.975339, 0.109095), (-0.0818821, 0.975339, -0.112716), (-0.045884, 0.99368, 0.109167), (-0.0458867, 0.99368, -0.112789), (-0.00598282, 1, 0.109095), (-0.00598549, 1, -0.112717), (0.0339184, 0.99368, 0.109166), (0.0339157, 0.99368, -0.11279), (0.0699138, 0.975339, 0.109094), (0.0699107, 0.975339, -0.112718), (0.0984796, 0.946773, 0.109165), (0.098477, 0.946773, -0.11279), (0.11682, 0.910778, 0.109093), (0.116818, 0.910778, -0.112719), (0.12314, 0.870877, 0.109165), (0.123137, 0.870877, -0.11279), (0.11682, 0.830976, 0.109093), (0.116818, 0.830976, -0.112719)]
                                texCoord2f[] primvars:st0 = [(0.89786, 0.642116), (0.89786, 0.659172), (0.954314, 0.659172), (0.954314, 0.642116), (0.89786, 0.676457), (0.954314, 0.676457), (0.954314, 0.659172), (0.89786, 0.693822), (0.954314, 0.693822), (0.89786, 0.71122396), (0.954314, 0.71122396), (0.89786, 0.72871697), (0.954314, 0.72871697), (0.89786, 0.746211), (0.954314, 0.746211), (0.89786, 0.76365197), (0.954314, 0.763529), (0.954314, 0.746211), (0.89786, 0.780912), (0.954314, 0.780912), (0.89786, 0.79837203), (0.954314, 0.79837203), (0.954314, 0.780912), (0.89786, 0.815834), (0.954314, 0.815834), (0.89786, 0.8333), (0.954314, 0.8333), (0.89786, 0.850968), (0.954314, 0.850826), (0.954314, 0.8333), (0.89786, 0.868419), (0.954314, 0.868297), (0.89786, 0.885737), (0.954314, 0.885737), (0.89786, 0.885737), (0.89786, 0.903231), (0.954314, 0.903231), (0.89786, 0.903231), (0.89786, 0.920724), (0.954314, 0.920724), (0.89786, 0.938127), (0.954314, 0.938198), (0.954314, 0.920724), (0.89786, 0.955492), (0.954314, 0.955492), (0.89786, 0.972777), (0.954314, 0.972777), (0.89786, 0.972777), (0.89786, 0.989832), (0.954314, 0.989832), (0.892925, 0.642116), (0.892925, 0.659172), (0.89786, 0.642116), (0.95925, 0.659172), (0.95925, 0.642116), (0.954314, 0.642116), (0.954314, 0.659172), (0.892925, 0.676457), (0.89786, 0.676457), (0.95925, 0.676457), (0.954314, 0.659172), (0.954314, 0.676457), (0.892925, 0.693822), (0.89786, 0.676457), (0.95925, 0.693822), (0.954314, 0.676457), (0.892925, 0.71122396), (0.95925, 0.71122396), (0.954314, 0.71122396), (0.892925, 0.72871697), (0.89786, 0.72871697), (0.95925, 0.72871697), (0.954314, 0.71122396), (0.954314, 0.72871697), (0.892925, 0.746211), (0.89786, 0.746211), (0.89786, 0.72871697), (0.95925, 0.746211), (0.892925, 0.763694), (0.89786, 0.746211), (0.95925, 0.763476), (0.954314, 0.746211), (0.892925, 0.780912), (0.89786, 0.780912), (0.95925, 0.780912), (0.954314, 0.780912), (0.892925, 0.79837203), (0.89786, 0.79837203), (0.89786, 0.780912), (0.95925, 0.79837203), (0.954314, 0.780912), (0.892925, 0.815834), (0.89786, 0.79837203), (0.95925, 0.815834), (0.892925, 0.8333), (0.95925, 0.8333), (0.892925, 0.851019), (0.95925, 0.85078), (0.954314, 0.8333), (0.892925, 0.868473), (0.95925, 0.868255), (0.892925, 0.885737), (0.95925, 0.885737), (0.954314, 0.885737), (0.892925, 0.903231), (0.89786, 0.903231), (0.95925, 0.903231), (0.954314, 0.885737), (0.892925, 0.920724), (0.89786, 0.920724), (0.95925, 0.920724), (0.892925, 0.938261), (0.89786, 0.920724), (0.95925, 0.938286), (0.954314, 0.920724), (0.892925, 0.955492), (0.95925, 0.955492), (0.892925, 0.972777), (0.89786, 0.972777), (0.95925, 0.972777), (0.954314, 0.972777), (0.892925, 0.989832), (0.89786, 0.972777), (0.95925, 0.989832), (0.954314, 0.972777), (0.954314, 0.989832), (0.854382, 0.72464), (0.856067, 0.725188), (0.8583, 0.711093), (0.856553, 0.711093), (0.848175, 0.73687696), (0.849589, 0.737903), (0.838456, 0.74656), (0.839498, 0.747994), (0.826243, 0.752812), (0.826783, 0.754473), (0.812688, 0.754933), (0.812687, 0.756705), (0.799132, 0.752812), (0.798593, 0.754473), (0.786919, 0.74656), (0.785877, 0.747994), (0.7772, 0.73687696), (0.775786, 0.737903), (0.770994, 0.72464), (0.769308, 0.725188), (0.768822, 0.711093), (0.767075, 0.711093), (0.770994, 0.697546), (0.769308, 0.696998), (0.777199, 0.685309), (0.775786, 0.684283), (0.786919, 0.67562604), (0.785877, 0.674192), (0.799132, 0.669374), (0.798592, 0.667713), (0.812688, 0.667253), (0.812688, 0.665481), (0.826243, 0.669374), (0.826783, 0.667713), (0.838456, 0.67562604), (0.839498, 0.674192), (0.848176, 0.685309), (0.849589, 0.684283), (0.854382, 0.697546), (0.856067, 0.696998), (0.676181, 0.72309697), (0.674495, 0.723644), (0.680974, 0.73636), (0.682387, 0.73533297), (0.674009, 0.70955), (0.672263, 0.70955), (0.691065, 0.746451), (0.692107, 0.745017), (0.70378, 0.75293), (0.70432, 0.751268), (0.717875, 0.755162), (0.717875, 0.753389), (0.73197, 0.75293), (0.73143, 0.751268), (0.744685, 0.746451), (0.743644, 0.745017), (0.754776, 0.73636), (0.753363, 0.73533297), (0.761255, 0.723644), (0.759569, 0.72309697), (0.763488, 0.70955), (0.761741, 0.709549), (0.761255, 0.695455), (0.759569, 0.696002), (0.754776, 0.682739), (0.753363, 0.683766), (0.744685, 0.672648), (0.743643, 0.67408204), (0.73197, 0.666169), (0.731431, 0.667831), (0.717875, 0.663937), (0.717875, 0.66571), (0.70378, 0.66617), (0.70432, 0.667831), (0.691065, 0.672648), (0.692107, 0.67408204), (0.680974, 0.682739), (0.682387, 0.683766), (0.674495, 0.695455), (0.676181, 0.696002), (0.812688, 0.711093), (0.717875, 0.70955), (0.88328, 0.642116), (0.883264, 0.659172), (0.96891, 0.659172), (0.968895, 0.642116), (0.88328, 0.676457), (0.968895, 0.676457), (0.883264, 0.693822), (0.96891, 0.693822), (0.88328, 0.71122396), (0.968895, 0.71122396), (0.883264, 0.72871697), (0.96891, 0.72871697), (0.88328, 0.746211), (0.968895, 0.746211), (0.883264, 0.763695), (0.96891, 0.763457), (0.88328, 0.780912), (0.968895, 0.780912), (0.883264, 0.79837203), (0.96891, 0.79837203), (0.88328, 0.815834), (0.968895, 0.815834), (0.883264, 0.8333), (0.96891, 0.8333), (0.88328, 0.851035), (0.968895, 0.850773), (0.883264, 0.868492), (0.96891, 0.868253), (0.88328, 0.885737), (0.968895, 0.885737), (0.883264, 0.903231), (0.96891, 0.903231), (0.88328, 0.920724), (0.968895, 0.920724), (0.883264, 0.938421), (0.96891, 0.938472), (0.88328, 0.955492), (0.968895, 0.955492), (0.883264, 0.972777), (0.96891, 0.972777), (0.88328, 0.989832), (0.968895, 0.989832)] (
                                    interpolation = "vertex"
                                )
                                uniform token subdivisionScheme = "none"
                                float3 xformOp:translate = (0, 0, 0)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }

                        def Xform "defaultMaterial_1"
                        {
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Mesh "defaultMaterial" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                uniform bool doubleSided = 1
                                float3[] extent = [(-0.325385, -1, -0.149657), (0.325385, 0.951982, 0.149657)]
                                int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                                int[] faceVertexIndices = [0, 1, 2, 3, 0, 2, 4, 3, 2, 5, 4, 2, 6, 5, 2, 7, 6, 2, 8, 7, 2, 9, 8, 2, 10, 9, 2, 11, 10, 2, 12, 11, 2, 13, 12, 2, 14, 13, 2, 15, 14, 2, 16, 15, 2, 17, 16, 2, 18, 17, 2, 19, 18, 2, 20, 19, 2, 1, 20, 2, 24, 21, 22, 22, 23, 24, 26, 25, 21, 21, 24, 26, 28, 27, 25, 25, 26, 28, 29, 27, 28, 33, 30, 31, 31, 32, 33, 35, 30, 33, 33, 34, 35, 37, 35, 34, 34, 36, 37, 39, 37, 36, 36, 38, 39, 41, 39, 38, 38, 40, 41, 43, 41, 40, 40, 42, 43, 47, 44, 45, 45, 46, 47, 49, 47, 46, 46, 48, 49, 51, 49, 48, 48, 50, 51, 53, 51, 50, 50, 52, 53, 55, 53, 52, 52, 54, 55, 57, 55, 54, 54, 56, 57, 59, 57, 56, 56, 58, 59, 61, 59, 58, 58, 60, 61, 63, 61, 60, 60, 62, 63, 65, 63, 62, 62, 64, 65, 67, 65, 64, 64, 66, 67, 69, 67, 66, 66, 68, 69, 71, 69, 68, 68, 70, 71, 31, 71, 70, 70, 32, 31, 75, 72, 73, 73, 74, 75, 77, 76, 72, 72, 75, 77, 79, 78, 76, 76, 77, 79, 81, 80, 78, 78, 79, 81, 83, 82, 80, 80, 81, 83, 85, 84, 82, 82, 83, 85, 89, 86, 87, 87, 88, 89, 91, 90, 86, 86, 89, 91, 93, 92, 90, 90, 91, 93, 95, 94, 92, 92, 93, 95, 97, 96, 94, 94, 95, 97, 99, 98, 96, 96, 97, 99, 74, 73, 98, 98, 99, 74, 103, 100, 101, 101, 102, 103, 105, 101, 100, 100, 104, 105, 107, 105, 104, 104, 106, 107, 109, 107, 106, 106, 108, 109, 111, 109, 108, 108, 110, 111, 113, 111, 110, 110, 112, 113, 115, 113, 112, 112, 114, 115, 119, 116, 117, 117, 118, 119, 121, 119, 118, 118, 120, 121, 123, 121, 120, 120, 122, 123, 125, 123, 122, 122, 124, 125, 127, 125, 124, 124, 126, 127, 102, 127, 126, 126, 103, 102, 109, 79, 77, 77, 107, 109, 111, 81, 79, 79, 109, 111, 113, 83, 81, 81, 111, 113, 115, 85, 83, 83, 113, 115, 119, 89, 88, 88, 116, 119, 121, 91, 89, 89, 119, 121, 123, 93, 91, 91, 121, 123, 125, 95, 93, 93, 123, 125, 127, 97, 95, 95, 125, 127, 102, 99, 97, 97, 127, 102, 101, 74, 99, 99, 102, 101, 105, 75, 74, 74, 101, 105, 107, 77, 75, 75, 105, 107, 131, 128, 129, 129, 130, 131, 130, 129, 132, 132, 133, 130, 133, 132, 134, 134, 135, 133, 135, 134, 136, 136, 137, 135, 137, 136, 138, 138, 139, 137, 138, 140, 139, 21, 141, 142, 142, 22, 21, 22, 142, 143, 143, 23, 22, 23, 143, 144, 144, 24, 23, 25, 145, 141, 141, 21, 25, 24, 144, 146, 146, 26, 24, 27, 147, 145, 145, 25, 27, 26, 146, 148, 148, 28, 26, 29, 149, 147, 147, 27, 29, 28, 148, 149, 149, 29, 28, 153, 150, 151, 151, 152, 153, 152, 151, 154, 154, 155, 152, 155, 154, 156, 156, 157, 155, 157, 156, 158, 158, 159, 157, 163, 160, 161, 161, 162, 163, 162, 161, 164, 164, 165, 162, 165, 164, 166, 166, 167, 165, 167, 166, 168, 168, 169, 167, 169, 168, 170, 170, 171, 169, 171, 170, 150, 150, 153, 171, 155, 172, 153, 153, 152, 155, 159, 172, 155, 155, 157, 159, 165, 172, 163, 163, 162, 165, 169, 172, 165, 165, 167, 169, 153, 172, 169, 169, 171, 153, 176, 173, 174, 174, 175, 176, 178, 177, 173, 173, 176, 178, 180, 179, 177, 177, 178, 180, 182, 181, 179, 179, 180, 182, 186, 183, 184, 184, 185, 186, 188, 187, 183, 183, 186, 188, 190, 189, 187, 187, 188, 190, 192, 191, 189, 189, 190, 192, 194, 193, 191, 191, 192, 194, 175, 174, 193, 193, 194, 175, 198, 195, 196, 196, 197, 198, 200, 199, 195, 195, 198, 200, 202, 201, 199, 199, 200, 202, 204, 203, 201, 201, 202, 204, 208, 205, 206, 206, 207, 208, 210, 209, 205, 205, 208, 210, 212, 211, 209, 209, 210, 212, 214, 213, 211, 211, 212, 214, 216, 215, 213, 213, 214, 216, 197, 196, 215, 215, 216, 197]
                                rel material:binding = </Root/lighter/Materials_1/lambert2SG> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                                normal3f[] normals = [(0.5338399, -0.056426983, -0.8437008), (0.8147266, -0.068045974, -0.5758387), (-0, -1, 0), (0.31643003, -0.04769601, -0.9474161), (0.14758594, -0.042940985, -0.9881166), (-0.000013000002, -0.041461002, -0.99914014), (-0.14761099, -0.042940997, -0.98811287), (-0.316454, -0.047696, -0.947408), (-0.53386, -0.056427, -0.843688), (-0.8147399, -0.068045996, -0.57581997), (-0.9972251, -0.07444601, 0.000014000002), (-0.8147242, -0.06804602, 0.57584214), (-0.5338411, -0.056427006, 0.8437001), (-0.3164309, -0.04769599, 0.94741577), (-0.14758497, -0.04294099, 0.98811674), (0.000012000002, -0.041461002, 0.99914014), (0.14761001, -0.042941004, 0.9881131), (0.31645492, -0.04769599, 0.9474078), (0.53386116, -0.056427017, 0.8436873), (0.8147399, -0.068045996, 0.57581997), (0.997225, -0.074447, -0.000009), (-0.025862006, 0.99707925, 0.07186302), (0.22070308, 0.9723794, 0.07595103), (0.22070107, 0.9723794, -0.07595703), (-0.025864005, 0.99707925, -0.07186201), (-0.057384007, 0.9942941, 0.08992401), (-0.057386007, 0.9942941, -0.08992301), (-0.15194394, 0.98218864, 0.11053796), (-0.15194607, 0.98218846, -0.110536054), (-0.52077, 0.853697, 0.000004), (-0.316454, -0.047696, -0.947408), (-0.53386, -0.056427, -0.843688), (-0.5347117, 0, -0.84503454), (-0.3168151, 0, -0.94848734), (-0.14774702, 0, -0.98902524), (-0.14761099, -0.042940997, -0.98811287), (-0.000013, 0.000252, -1), (-0.000013000002, -0.041461002, -0.99914014), (0.24415791, 0.02900499, -0.96930164), (0.14758594, -0.042940985, -0.9881166), (0.31696004, 0.0077730007, -0.9484071), (0.31643003, -0.04769601, -0.9474161), (0.53470594, 0.006921999, -0.84500986), (0.5338399, -0.056426983, -0.8437008), (0.5338399, -0.056426983, -0.8437008), (0.53470594, 0.006921999, -0.84500986), (0.8165308, 0.0067919986, -0.57726187), (0.8147266, -0.068045974, -0.5758387), (0.99997586, 0.006960999, -0.000008999999), (0.997225, -0.074447, -0.000009), (0.8165437, 0.0067919977, 0.5772438), (0.8147399, -0.068045996, 0.57581997), (0.53472793, 0.006921999, 0.84499586), (0.53386116, -0.056427017, 0.8436873), (0.31698403, 0.0077730007, 0.9483991), (0.31645492, -0.04769599, 0.9474078), (0.24418192, 0.02900499, 0.9692956), (0.14761001, -0.042941004, 0.9881131), (0.000012, 0.000252, 1), (0.000012000002, -0.041461002, 0.99914014), (-0.14772101, 0, 0.9890291), (-0.14758497, -0.04294099, 0.98811674), (-0.31679204, 0, 0.9484951), (-0.3164309, -0.04769599, 0.94741577), (-0.5346932, 0, 0.8450463), (-0.5338411, -0.056427006, 0.8437001), (-0.816617, 0, 0.57718), (-0.8147242, -0.06804602, 0.57584214), (-1, 0, 0.000014), (-0.9972251, -0.07444601, 0.000014000002), (-0.8166327, 0, -0.5771578), (-0.8147399, -0.068045996, -0.57581997), (0.000012, 0.000252, 1), (0.24418192, 0.02900499, 0.9692956), (0.9462471, 0.19497404, 0.25807303), (0.00009299998, 0.004317999, 0.99999076), (-0.14772101, 0, 0.9890291), (-0.14763093, -0, 0.9890425), (-0.31679204, 0, 0.9484951), (-0.31679204, 0, 0.9484951), (-0.5346932, 0, 0.8450463), (-0.53469276, 0, 0.8450466), (-0.816617, 0, 0.57718), (-0.816617, 0, 0.57718), (-1, 0, 0.000014), (-1, 0, 0.000014), (-0.8166327, 0, -0.5771578), (-1, 0, 0.000014), (-1, 0, 0.000014), (-0.8166327, 0, -0.5771578), (-0.5347117, 0, -0.84503454), (-0.5347117, 0, -0.84503454), (-0.3168151, 0, -0.94848734), (-0.3168151, 0, -0.94848734), (-0.14774702, 0, -0.98902524), (-0.14765596, 0, -0.98903877), (-0.000013, 0.000252, -1), (0.000064999986, 0.004316999, -0.99999076), (0.24415791, 0.02900499, -0.96930164), (0.9462408, 0.19497296, -0.25809693), (0.28711307, 0.95644826, 0.052659012), (0.93539363, 0.2756409, 0.22149692), (0.9353877, 0.2756409, -0.22152193), (0.28711295, 0.9564478, -0.05266699), (-0.000996, 0.997751, 0.067023), (0.00039100018, 0.11722406, 0.9931055), (-0.009747005, 0.9978245, 0.06520303), (-0.14632694, 0.12879096, 0.98081666), (-0.024846004, 0.9969101, 0.07451901), (-0.3141451, 0.12748703, 0.9407762), (-0.05870903, 0.9939135, 0.093217045), (-0.53037, 0.123694, 0.838694), (-0.16091605, 0.98021823, 0.11523203), (-0.8106122, 0.11691603, 0.5737931), (-0.5410948, 0.8409616, 0.000007999996), (-0.9936449, 0.11255998, 0.000013999998), (-0.9936449, 0.11255998, 0.000013999998), (-0.5410948, 0.8409616, 0.000007999996), (-0.16091901, 0.9802181, -0.11522902), (-0.810628, 0.116915, -0.573771), (-0.058711022, 0.99391335, -0.09321603), (-0.53038824, 0.12369406, -0.8386824), (-0.024848003, 0.9969101, -0.07451801), (-0.3141679, 0.12748696, -0.94076866), (-0.009748004, 0.9978245, -0.06520303), (-0.14635198, 0.12879099, -0.9808129), (-0.000998, 0.997751, -0.067022), (0.0003599999, 0.11722296, -0.99310565), (0.28711295, 0.9564478, -0.05266699), (-0.000998, 0.997751, -0.067022), (-0.000996, 0.997751, 0.067023), (0.28711307, 0.95644826, 0.052659012), (-0.009748004, 0.9978245, -0.06520303), (-0.009747005, 0.9978245, 0.06520303), (-0.024848003, 0.9969101, -0.07451801), (-0.024846004, 0.9969101, 0.07451901), (-0.058711022, 0.99391335, -0.09321603), (-0.05870903, 0.9939135, 0.093217045), (-0.16091901, 0.9802181, -0.11522902), (-0.16091605, 0.98021823, 0.11523203), (-0.5410948, 0.8409616, 0.000007999996), (0.31696004, 0.0077730007, -0.9484071), (0.24415791, 0.02900499, -0.96930164), (0.24418192, 0.02900499, 0.9692956), (0.31698403, 0.0077730007, 0.9483991), (0.53470594, 0.006921999, -0.84500986), (0.53472793, 0.006921999, 0.84499586), (0.8165308, 0.0067919986, -0.57726187), (0.8165437, 0.0067919977, 0.5772438), (0.99997586, 0.006960999, -0.000008999999), (0.38942885, -0.8951737, -0.21681592), (0.31410104, -0.87303615, -0.37302604), (0.008900994, 0.9912474, -0.13171692), (0.031449992, 0.9967238, -0.07451598), (0.23256809, -0.8470553, -0.47792217), (-0.012880005, 0.98267037, -0.18491405), (-0.067119986, -0.7540168, -0.6534168), (-0.13399407, 0.9408835, -0.31110117), (-0.29467598, -0.7430859, -0.60082394), (-0.18730806, 0.9637424, -0.19004308), (-0.29466322, -0.7430825, 0.6008344), (-0.067108005, -0.75401515, 0.65342003), (-0.13398804, 0.94088334, 0.31110412), (-0.187305, 0.963742, 0.190048), (0.232578, -0.847056, 0.477916), (-0.012875998, 0.9826709, 0.18491098), (0.31410897, -0.8730359, 0.37301996), (0.008903998, 0.9912478, 0.13171397), (0.38943294, -0.8951739, 0.21680798), (0.031451005, 0.9967241, 0.074512005), (0.429899, -0.902877, -0.000002), (0.043701984, 0.99904466, -0.0000019999993), (-0.078257024, 0.9969332, 0), (0.31410104, -0.87303615, -0.37302604), (0.38942885, -0.8951737, -0.21681592), (0.50483686, -0.8094868, -0.29978493), (0.4139409, -0.73170185, -0.5415399), (0.23256809, -0.8470553, -0.47792217), (0.29159218, -0.6631974, -0.68930644), (-0.067119986, -0.7540168, -0.6534168), (-0.11181202, -0.57370806, -0.8113921), (-0.29467598, -0.7430859, -0.60082394), (-0.47055674, -0.27668482, -0.8378675), (-0.067108005, -0.75401515, 0.65342003), (-0.29466322, -0.7430825, 0.6008344), (-0.47054023, -0.2766801, 0.8378784), (-0.111797, -0.573704, 0.811397), (0.232578, -0.847056, 0.477916), (0.2916069, -0.66319776, 0.68929976), (0.31410897, -0.8730359, 0.37301996), (0.41395295, -0.73170394, 0.5415279), (0.38943294, -0.8951739, 0.21680798), (0.50484407, -0.8094871, 0.29977202), (0.429899, -0.902877, -0.000002), (0.53317803, -0.8460031, -0.0000040000004), (0.4139409, -0.73170185, -0.5415399), (0.50483686, -0.8094868, -0.29978493), (0.82384616, 0.06467001, -0.56311214), (0.5470029, 0.042937998, -0.8360289), (0.29159218, -0.6631974, -0.68930644), (0.32634187, 0.02561699, -0.9449046), (-0.11181202, -0.57370806, -0.8113921), (-0.18864995, -0.014808997, -0.98193276), (-0.47055674, -0.27668482, -0.8378675), (-0.50386477, -0.03955198, -0.8628766), (-0.111797, -0.573704, 0.811397), (-0.47054023, -0.2766801, 0.8378784), (-0.503847, -0.039551, 0.862887), (-0.18863204, -0.014807004, 0.9819362), (0.2916069, -0.66319776, 0.68929976), (0.3263619, 0.02561899, 0.94489765), (0.41395295, -0.73170394, 0.5415279), (0.5470228, 0.042939983, 0.8360157), (0.50484407, -0.8094871, 0.29977202), (0.82386273, 0.06467098, 0.5630878), (0.53317803, -0.8460031, -0.0000040000004), (0.99693334, 0.07825603, -0.000014000006)] (
                                    interpolation = "vertex"
                                )
                                point3f[] points = [(0.263241, -1, -0.0879285), (0.309459, -1, -0.0462288), (0, -1, -2.25816e-7), (0.191255, -1, -0.121021), (0.100548, -1, -0.142267), (-0.00000178286, -1, -0.149587), (-0.100551, -1, -0.142265), (-0.191258, -1, -0.121016), (-0.263244, -1, -0.0879218), (-0.309461, -0.999999, -0.0462212), (-0.325385, -0.999999, 0.00000378561), (-0.309459, -1, 0.0462283), (-0.263241, -1, 0.0879285), (-0.191255, -1, 0.12102), (-0.100548, -1, 0.142267), (0.00000178286, -1, 0.149587), (0.100551, -1, 0.142264), (0.191258, -1, 0.121016), (0.263243, -1, 0.0879218), (0.30946, -1, 0.0462208), (0.325385, -1, -0.00000423724), (0.19415, 0.704482, -0.104885), (0.115537, 0.704482, -0.123298), (0.11554, 0.704482, 0.123295), (0.194153, 0.704482, 0.10488), (0.256538, 0.704482, -0.0762048), (0.25654, 0.704482, 0.0761986), (0.296594, 0.704482, -0.040065), (0.296594, 0.704482, 0.0400579), (0.310396, 0.704482, -0.00000379153), (-0.191258, -1, -0.121016), (-0.263244, -1, -0.0879218), (-0.263244, 0.718986, -0.0879218), (-0.191258, 0.718986, -0.121016), (-0.100551, 0.718986, -0.142265), (-0.100551, -1, -0.142265), (-0.00000178286, 0.718986, -0.149587), (-0.00000178286, -1, -0.149587), (0.100548, 0.718986, -0.142267), (0.100548, -1, -0.142267), (0.191255, 0.718986, -0.121021), (0.191255, -1, -0.121021), (0.263241, 0.718986, -0.0879285), (0.263241, -1, -0.0879285), (0.263241, -1, -0.0879285), (0.263241, 0.718986, -0.0879285), (0.309459, 0.718986, -0.0462288), (0.309459, -1, -0.0462288), (0.325385, 0.718986, -0.00000423724), (0.325385, -1, -0.00000423724), (0.30946, 0.718986, 0.0462208), (0.30946, -1, 0.0462208), (0.263243, 0.718986, 0.0879218), (0.263243, -1, 0.0879218), (0.191258, 0.718986, 0.121016), (0.191258, -1, 0.121016), (0.100551, 0.718986, 0.142264), (0.100551, -1, 0.142264), (0.00000178286, 0.718986, 0.149587), (0.00000178286, -1, 0.149587), (-0.100548, 0.718986, 0.142267), (-0.100548, -1, 0.142267), (-0.191255, 0.718986, 0.12102), (-0.191255, -1, 0.12102), (-0.263241, 0.718986, 0.0879285), (-0.263241, -1, 0.0879285), (-0.309459, 0.718986, 0.0462283), (-0.309459, -1, 0.0462283), (-0.325385, 0.718986, 0.00000378561), (-0.325385, -0.999999, 0.00000378561), (-0.309461, 0.718986, -0.0462212), (-0.309461, -0.999999, -0.0462212), (0.00000178286, 0.718986, 0.149587), (0.100551, 0.718986, 0.142264), (0.0752561, 0.835484, 0.142264), (0.00000178286, 0.835484, 0.149587), (-0.100548, 0.718986, 0.142267), (-0.100548, 0.835484, 0.142267), (-0.191255, 0.718986, 0.12102), (-0.191255, 0.835484, 0.12102), (-0.263241, 0.718986, 0.0879285), (-0.263241, 0.835484, 0.0879285), (-0.309459, 0.718986, 0.0462283), (-0.309459, 0.835484, 0.0462283), (-0.325385, 0.718986, 0.00000378561), (-0.325385, 0.835484, 0.00000378561), (-0.309461, 0.718986, -0.0462212), (-0.325385, 0.718986, 0.00000378561), (-0.325385, 0.835484, 0.00000378561), (-0.309461, 0.835484, -0.0462212), (-0.263244, 0.718986, -0.0879218), (-0.263244, 0.835484, -0.0879218), (-0.191258, 0.718986, -0.121016), (-0.191258, 0.835484, -0.121016), (-0.100551, 0.718986, -0.142265), (-0.100551, 0.835484, -0.142265), (-0.00000178286, 0.718986, -0.149587), (-0.00000178286, 0.835484, -0.149587), (0.100548, 0.718986, -0.142267), (0.0752526, 0.835484, -0.142267), (0.0369475, 0.951982, 0.129121), (0.0550207, 0.937152, 0.142095), (0.0550172, 0.937152, -0.142097), (0.0369443, 0.951982, -0.129123), (-0.000528617, 0.951982, 0.133774), (0.000960514, 0.93625, 0.149657), (-0.0981605, 0.951982, 0.126616), (-0.100548, 0.936199, 0.142267), (-0.186107, 0.951982, 0.106016), (-0.191255, 0.936199, 0.12102), (-0.254458, 0.951982, 0.0745949), (-0.263241, 0.936199, 0.0879285), (-0.295863, 0.951982, 0.0372378), (-0.309459, 0.936199, 0.0462283), (-0.308692, 0.951982, 0.00000378561), (-0.325385, 0.936199, 0.00000378561), (-0.325385, 0.936199, 0.00000378561), (-0.308692, 0.951982, 0.00000378561), (-0.295865, 0.951982, -0.0372307), (-0.309461, 0.936199, -0.0462212), (-0.25446, 0.951982, -0.0745887), (-0.263244, 0.936199, -0.0879218), (-0.18611, 0.951982, -0.106012), (-0.191258, 0.936199, -0.121016), (-0.0981636, 0.951982, -0.126613), (-0.100551, 0.936199, -0.142265), (-0.000531737, 0.951982, -0.133774), (0.000956502, 0.93625, -0.149657), (0.0369443, 0.951982, -0.129123), (-0.000531737, 0.951982, -0.133774), (-0.000528617, 0.951982, 0.133774), (0.0369475, 0.951982, 0.129121), (-0.0981636, 0.951982, -0.126613), (-0.0981605, 0.951982, 0.126616), (-0.18611, 0.951982, -0.106012), (-0.186107, 0.951982, 0.106016), (-0.25446, 0.951982, -0.0745887), (-0.254458, 0.951982, 0.0745949), (-0.295865, 0.951982, -0.0372307), (-0.295863, 0.951982, 0.0372378), (-0.308692, 0.951982, 0.00000378561), (0.191255, 0.718986, -0.121021), (0.100548, 0.718986, -0.142267), (0.100551, 0.718986, 0.142264), (0.191258, 0.718986, 0.121016), (0.263241, 0.718986, -0.0879285), (0.263243, 0.718986, 0.0879218), (0.309459, 0.718986, -0.0462288), (0.30946, 0.718986, 0.0462208), (0.325385, 0.718986, -0.00000423724), (0.308796, 0.784598, -0.035229), (0.274943, 0.781942, -0.0670066), (0.273117, 0.805206, -0.0670066), (0.306969, 0.807864, -0.035229), (0.222218, 0.777803, -0.0922247), (0.220391, 0.801068, -0.0922247), (0.15578, 0.772587, -0.108415), (0.153953, 0.795853, -0.108415), (0.0821335, 0.766806, -0.0651458), (0.0803074, 0.790071, -0.0651458), (0.0821357, 0.766806, 0.0651436), (0.155783, 0.772588, 0.108412), (0.153957, 0.795853, 0.108412), (0.0803092, 0.790072, 0.0651436), (0.222221, 0.777803, 0.0922198), (0.220394, 0.801068, 0.0922198), (0.274945, 0.781942, 0.0670004), (0.273119, 0.805207, 0.0670004), (0.308796, 0.784599, 0.0352223), (0.30697, 0.807864, 0.0352223), (0.32046, 0.785514, -0.00000334581), (0.318634, 0.80878, -0.00000334581), (0.0803083, 0.790072, -0.00000111724), (0.274943, 0.781942, -0.0670066), (0.308796, 0.784598, -0.035229), (0.218131, 0.777482, -0.0211378), (0.19782, 0.775887, -0.0402041), (0.222218, 0.777803, -0.0922247), (0.166184, 0.773404, -0.0553352), (0.15578, 0.772587, -0.108415), (0.126322, 0.770275, -0.0650495), (0.0821335, 0.766806, -0.0651458), (0.082134, 0.766806, -0.039088), (0.155783, 0.772588, 0.108412), (0.0821357, 0.766806, 0.0651436), (0.0821353, 0.766806, 0.0390858), (0.126324, 0.770275, 0.0650468), (0.222221, 0.777803, 0.0922198), (0.166186, 0.773404, 0.0553316), (0.274945, 0.781942, 0.0670004), (0.197821, 0.775887, 0.0401996), (0.308796, 0.784599, 0.0352223), (0.218132, 0.777482, 0.0211329), (0.32046, 0.785514, -0.00000334581), (0.22513, 0.778031, -0.00000245439), (0.19782, 0.775887, -0.0402041), (0.218131, 0.777482, -0.0211378), (0.224447, 0.697016, -0.0211378), (0.204136, 0.695421, -0.0402041), (0.166184, 0.773404, -0.0553352), (0.172501, 0.692938, -0.0553352), (0.126322, 0.770275, -0.0650495), (0.132638, 0.689809, -0.0650495), (0.082134, 0.766806, -0.039088), (0.0884502, 0.68634, -0.039088), (0.126324, 0.770275, 0.0650468), (0.0821353, 0.766806, 0.0390858), (0.0884515, 0.68634, 0.0390858), (0.13264, 0.689809, 0.0650468), (0.166186, 0.773404, 0.0553316), (0.172502, 0.692938, 0.0553316), (0.197821, 0.775887, 0.0401996), (0.204137, 0.695421, 0.0401996), (0.218132, 0.777482, 0.0211329), (0.224448, 0.697016, 0.0211329), (0.22513, 0.778031, -0.00000245439), (0.231446, 0.697565, -0.00000245439)]
                                texCoord2f[] primvars:st0 = [(0.658196, 0.923254), (0.66464, 0.931406), (0.675705, 0.880362), (0.653467, 0.910903), (0.650914, 0.895563), (0.650788, 0.878735), (0.653101, 0.86206603), (0.657627, 0.847188), (0.663922, 0.835557), (0.671371, 0.828312), (0.679244, 0.826162), (0.686771, 0.829317), (0.693214, 0.837469), (0.697944, 0.84982), (0.700496, 0.86516), (0.700622, 0.881988), (0.698309, 0.898658), (0.693783, 0.913536), (0.687488, 0.925166), (0.680039, 0.932411), (0.672166, 0.934561), (0.577365, 0.84525096), (0.574173, 0.860188), (0.621414, 0.859029), (0.617372, 0.844211), (0.58253, 0.833313), (0.611531, 0.832537), (0.589199, 0.82555103), (0.604429, 0.825138), (0.596739, 0.822733), (0.12224, 0.993801), (0.13695, 0.993804), (0.137006, 0.67465496), (0.122299, 0.674649), (0.104999, 0.674645), (0.104944, 0.993798), (0.086278, 0.674641), (0.086226, 0.993795), (0.067558, 0.67463803), (0.06751, 0.993792), (0.05026, 0.674636), (0.050213, 0.993789), (0.03555, 0.674635), (0.035503, 0.993787), (0.32094, 0.993826), (0.320974, 0.674666), (0.309417, 0.674664), (0.309382, 0.993824), (0.300339, 0.674662), (0.300305, 0.993823), (0.29126, 0.67466104), (0.291228, 0.993823), (0.279701, 0.67465997), (0.27967, 0.993822), (0.264989, 0.67465997), (0.26496, 0.993822), (0.247692, 0.67465997), (0.247662, 0.99382), (0.228976, 0.674659), (0.228945, 0.993818), (0.210261, 0.674657), (0.210226, 0.993817), (0.192964, 0.674653), (0.192928, 0.993814), (0.178253, 0.674652), (0.178219, 0.993812), (0.166696, 0.67465496), (0.166662, 0.993809), (0.157624, 0.674659), (0.157585, 0.993808), (0.148556, 0.67465997), (0.148507, 0.993806), (0.446456, 0.747156), (0.468052, 0.747156), (0.465671, 0.710773), (0.446456, 0.710773), (0.419143, 0.747156), (0.419143, 0.710773), (0.386994, 0.747156), (0.386994, 0.710773), (0.364336, 0.747156), (0.364336, 0.710773), (0.349864, 0.747156), (0.349864, 0.710773), (0.33865, 0.747156), (0.33865, 0.710773), (0.633207, 0.747156), (0.644421, 0.747156), (0.644421, 0.710773), (0.633207, 0.710773), (0.618736, 0.747156), (0.618736, 0.710773), (0.596078, 0.747156), (0.596078, 0.710773), (0.563928, 0.747156), (0.563928, 0.710773), (0.536615, 0.747156), (0.536615, 0.710773), (0.515018, 0.747156), (0.517399, 0.710773), (0.463112, 0.67438996), (0.463475, 0.679022), (0.519595, 0.679022), (0.519959, 0.67439103), (0.446456, 0.67438996), (0.446456, 0.679304), (0.419143, 0.67438996), (0.419143, 0.67932), (0.386994, 0.67438996), (0.386994, 0.67932), (0.364336, 0.67438996), (0.364336, 0.67932), (0.349864, 0.67438996), (0.349864, 0.67932), (0.33865, 0.67438996), (0.338651, 0.67932), (0.644421, 0.67932), (0.644421, 0.67439103), (0.633207, 0.67439103), (0.633207, 0.67932), (0.618736, 0.67439103), (0.618736, 0.67932), (0.596078, 0.67439103), (0.596078, 0.67932), (0.563928, 0.67439103), (0.563928, 0.67932), (0.536615, 0.67439103), (0.536615, 0.679304), (0.853362, 0.987994), (0.855663, 0.969455), (0.723309, 0.969456), (0.725611, 0.987995), (0.852121, 0.921157), (0.72685, 0.921158), (0.841929, 0.87765), (0.73704, 0.877651), (0.826384, 0.843838), (0.752584, 0.843839), (0.807904, 0.82335603), (0.771065, 0.82335603), (0.789484, 0.81701), (0.574001, 0.845876), (0.570284, 0.863271), (0.625303, 0.861921), (0.620595, 0.844664), (0.580017, 0.831971), (0.613793, 0.831068), (0.587784, 0.822932), (0.605521, 0.822451), (0.596566, 0.81965), (0.409052, 0.779597), (0.374063, 0.80592597), (0.386346, 0.818581), (0.415898, 0.795734), (0.346081, 0.848452), (0.361797, 0.856735), (0.32825, 0.904063), (0.345163, 0.903603), (0.363347, 0.972442), (0.381342, 0.967117), (0.530858, 0.971417), (0.565892, 0.905028), (0.549362, 0.903905), (0.513092, 0.966654), (0.548858, 0.849259), (0.532752, 0.857412), (0.52135, 0.806972), (0.508692, 0.819137), (0.48697, 0.780406), (0.479445, 0.796077), (0.448359, 0.77014303), (0.447836, 0.787301), (0.447079, 0.968725), (0.584989, 0.966428), (0.597145, 0.97673), (0.602535, 0.949139), (0.595241, 0.942958), (0.575342, 0.950383), (0.589453, 0.933331), (0.569148, 0.930165), (0.585737, 0.9212), (0.5857, 0.907753), (0.595668, 0.907753), (0.652091, 0.930165), (0.635539, 0.907753), (0.625572, 0.907753), (0.635503, 0.9212), (0.645898, 0.950383), (0.631786, 0.933331), (0.63625, 0.966428), (0.625998, 0.942958), (0.624095, 0.97673), (0.618705, 0.949139), (0.61062, 0.98028), (0.61062, 0.95126903), (0.682007, 0.803619), (0.694296, 0.803619), (0.694296, 0.773233), (0.682007, 0.773233), (0.672255, 0.802735), (0.672255, 0.774117), (0.654195, 0.80185103), (0.654195, 0.775001), (0.634175, 0.80185103), (0.634175, 0.775001), (0.761642, 0.80185103), (0.781661, 0.80185103), (0.781662, 0.775001), (0.761642, 0.775001), (0.743581, 0.802735), (0.743582, 0.774117), (0.733829, 0.803619), (0.733829, 0.773232), (0.72154, 0.803619), (0.72154, 0.773233), (0.707918, 0.803619), (0.707918, 0.773233)] (
                                    interpolation = "vertex"
                                )
                                uniform token subdivisionScheme = "none"
                            }
                        }
                    }
                }
            }
        }

        def "lighter_" (
            customData = {
                float3 rotationEulerHint = (1.5707959, 1.5707963, 0)
            }
            references = @Basic_Lighter.usdz@
        )
        {
            quatf xformOp:orient = (0.7070198, 0.0110900225, 0.7070198, -0.011090044)
            float3 xformOp:scale = (2.220446e-16, 2.2204458e-16, 2.2204458e-16)
            float3 xformOp:translate = (-6.7889037, -0.36807254, 0.115551)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def "Computer_Desk" (
        active = true
        references = @Computer_Desk.usdz@
    )
    {
        float3 xformOp:scale = (0.015, 0.015, 0.015)
        float3 xformOp:translate = (-0.8005347, 4.3157754, -7.9243407)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (480.00003, 298, 260)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, -144, -0.0000076293945)
                }
            }
        }

        over "Meshes"
        {
            over "Sketchfab_model"
            {
                over "Root"
                {
                    over "Cube"
                    {
                        over "Cube_0"
                        {
                            over "Cube_0"
                            {
                            }
                        }

                        def RealityKitComponent "RigidBody"
                        {
                            bool gravityEnabled = 0
                            uniform token info:id = "RealityKit.RigidBody"
                            bool lockRotationX = 1
                            bool lockRotationY = 1
                            bool lockRotationZ = 1
                            bool lockTranslationX = 1
                            bool lockTranslationY = 1
                            bool lockTranslationZ = 1
                            token motionType = "Static"

                            def RealityKitStruct "massFrame"
                            {
                                def RealityKitStruct "m_pose"
                                {
                                }
                            }

                            def RealityKitStruct "material"
                            {
                                double dynamicFriction = 0.6
                                double staticFriction = 0.6
                            }
                        }

                        def RealityKitComponent "Collider"
                        {
                            uint group = 1
                            uniform token info:id = "RealityKit.Collider"
                            uint mask = 4294967295
                            token type = "Default"

                            def RealityKitStruct "Shape"
                            {
                                float3 extent = (4.8, 2.6, 0.1)
                                token shapeType = "Box"

                                def RealityKitStruct "pose"
                                {
                                }
                            }
                        }
                    }

                    over "Cube_002"
                    {
                        def RealityKitComponent "RigidBody"
                        {
                            bool gravityEnabled = 0
                            uniform token info:id = "RealityKit.RigidBody"
                            bool lockRotationX = 1
                            bool lockRotationY = 1
                            bool lockRotationZ = 1
                            bool lockTranslationX = 1
                            bool lockTranslationY = 1
                            bool lockTranslationZ = 1
                            token motionType = "Static"

                            def RealityKitStruct "massFrame"
                            {
                                def RealityKitStruct "m_pose"
                                {
                                }
                            }

                            def RealityKitStruct "material"
                            {
                                double dynamicFriction = 0.6
                                double staticFriction = 0.6
                            }
                        }

                        def RealityKitComponent "Collider"
                        {
                            uint group = 1
                            uniform token info:id = "RealityKit.Collider"
                            uint mask = 4294967295
                            token type = "Default"

                            def RealityKitStruct "Shape"
                            {
                                float3 extent = (0.1, 2.6, 2.88)
                                token shapeType = "Box"

                                def RealityKitStruct "pose"
                                {
                                }
                            }
                        }
                    }

                    over "Cube_001"
                    {
                        def RealityKitComponent "RigidBody"
                        {
                            bool gravityEnabled = 0
                            uniform token info:id = "RealityKit.RigidBody"
                            bool lockRotationX = 1
                            bool lockRotationY = 1
                            bool lockRotationZ = 1
                            bool lockTranslationX = 1
                            bool lockTranslationY = 1
                            bool lockTranslationZ = 1
                            token motionType = "Static"

                            def RealityKitStruct "massFrame"
                            {
                                def RealityKitStruct "m_pose"
                                {
                                }
                            }

                            def RealityKitStruct "material"
                            {
                                double dynamicFriction = 0.6
                                double staticFriction = 0.6
                            }
                        }

                        def RealityKitComponent "Collider"
                        {
                            uint group = 1
                            uniform token info:id = "RealityKit.Collider"
                            uint mask = 4294967295
                            token type = "Default"

                            def RealityKitStruct "Shape"
                            {
                                float3 extent = (0.1, 2.6, 2.88)
                                token shapeType = "Box"

                                def RealityKitStruct "pose"
                                {
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

