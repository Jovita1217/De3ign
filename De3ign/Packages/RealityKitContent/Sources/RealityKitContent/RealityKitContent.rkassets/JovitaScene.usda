#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "Cube_Back"]

def Xform "Root" (
    customData = {
        float3 rotationEulerHint = (0, -3.1417627, 0)
    }
)
{
    reorder nameChildren = ["Cube_Ground", "Cube_Wall_groop", "Cube_Left"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )
    quatf xformOp:orient = (0.00008515915, 0, 1, 0)
    float3 xformOp:scale = (1, 1, 1)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Cube "Cube_Ground" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_Ground/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (30, 1, 10)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Cube_Ground/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.46470568, 0.5, 0.48873118) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def NodeGraph "Cube_Wall_groop" (
        active = true
    )
    {
        reorder nameChildren = ["Cube_Back", "Cube_Left"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 86.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (133.5, 53)

        def Cube "Cube_Left" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Cube_Back", "DefaultMaterial"]
            rel material:binding = </Root/Cube_Wall_groop/Cube_Left/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 10, 10)
            float3 xformOp:translate = (2.9, 0.9, 1.7881393e-7)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Cube_Wall_groop/Cube_Left/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.07058824, 0.23529412, 0.28627452) (
                        colorSpace = "lin_srgb"
                    )
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def Cube "Cube_Back" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.5707964, 0, 0)
            }
        )
        {
            reorder nameChildren = ["DefaultMaterial", "DefaultMaterial_1"]
            rel material:binding = </Root/Cube_Wall_groop/Cube_Left/DefaultMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            quatf xformOp:orient = (0.70710677, 0.70710677, 0, 0)
            float3 xformOp:scale = (29.999994, 0.9999997, 9.999997)
            float3 xformOp:translate = (0, 0.8999999, 1.1000001)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def "Notebook" (
        active = true
        customData = {
            float3 rotationEulerHint = (-3.1415925, 0, 3.1415923)
        }
        references = @Notebook.usdz@
    )
    {
        quatf xformOp:orient = (-2.3547747e-15, -4.371139e-8, 1, 4.371139e-8)
        float3 xformOp:scale = (0.001, 0.001, 0.001)
        float3 xformOp:translate = (1.3, 0.85, 0.8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
    )
    {
        rel material:binding = </Root/Cube/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 3, 1)
        float3 xformOp:translate = (2.3, 0.4, 0.7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cube "Cube_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_1/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 3, 1)
        float3 xformOp:translate = (1.3, 0.4, 0.7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/Cube_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def "Tyrannosarus_rex_Free_model" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 4.0142574, 0)
        }
        references = @Tyrannosarus_rex_Free_model.usdz@
    )
    {
        quatf xformOp:orient = (-0.42261833, 0, 0.90630776, 0)
        float3 xformOp:scale = (0.0007, 0.0007, 0.0007)
        float3 xformOp:translate = (2.25, 0.75, 0.65)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "SkinColor"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "eyeColor"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "blackMatteColor"
            {
                token outputs:mtlx:surface.connect = </Root/Tyrannosarus_rex_Free_model/Materials/blackMatteColor/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Tyrannosarus_rex_Free_model/Materials/blackMatteColor/pbr_shader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                over "pbr_shader" (
                    active = true
                )
                {
                }

                def Shader "PreviewSurface" (
                    active = false
                )
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-255, 105)
                    float2 ui:nodegraph:node:size = (148.5, 199)
                }
            }

            over "eyeTransparentColor"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "teethTexture"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }
        }
    }

    def Cube "Cube_2" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_2/DefaultMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (3, 4, 0.01)
        float3 xformOp:translate = (0.3, 1, 0.9)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st"
            asset inputs:Poster1 (
                customData = {
                    dictionary realitykit = {
                        float2 sizeInSubgraph = (115.5, 53)
                        int stackingOrderInSubgraph = 0
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/Cube_2/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Cube_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (126.25, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "DefaultSurfaceShader" (
                active = true
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/Cube_2/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:opacityThreshold
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "opacityThreshold"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @Gost_in_the_shell.jpeg@
                float2 inputs:st.connect = </Root/Cube_2/DefaultMaterial/opacityThreshold/TexCoordReader.outputs:result>
                float outputs:r

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/Cube_2/DefaultMaterial/DefaultSurfaceShader.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "PreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @Gost_in_the_shell.jpeg@
                float2 inputs:st.connect = </Root/Cube_2/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/Cube_2/DefaultMaterial/DefaultSurfaceShader.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }
    }

    def Cube "Cube_3" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_3/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 3, 1)
        float3 xformOp:translate = (-0.7, 0.4, 0.7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/Cube_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def "Carvaan_Music_Player" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 3.1415925, 0)
        }
        references = @Carvaan_Music_Player.usdz@
    )
    {
        reorder nameChildren = ["Materials", "Meshes", "Collider", "InputTarget", "ParticleEmitter"]
        quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
        float3 xformOp:scale = (0.001, 0.001, 0.001)
        float3 xformOp:translate = (-0.7, 0.85, 0.7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (374.19064, 291.06058, 114.787285)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 12.39241, 3.7750893)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def Xform "ParticleEmitter"
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0.00008511543, 0)
            float3 xformOp:scale = (999.99994, 999.99994, 999.99994)
            float3 xformOp:translate = (0, 145.58319, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "VFXEmitter"
            {
                token info:id = "RealityKit.VFXEmitter"

                def RealityKitStruct "currentState"
                {
                    double emissionDuration = 1
                    float particleSpeed = 0.1
                    float3 shapeSize = (0.1, 0.1, 0.1)
                    float spawnVelocityFactor = 1

                    def RealityKitStruct "mainEmitter"
                    {
                        float birthRate = 20
                        token blendMode = "Opaque"
                        float4 endColorA = (1, 0.0076329373, 1, 1)
                        token opacityOverLife = "GradualFadeInOut"
                        asset particleImage = @YinFu_F.png@
                        float particleSize = 0.03
                        float4 startColorA = (0, 1, 0.903683, 1)
                        bool useEndColor = 1
                        bool useEndColorRange = 0
                        bool useStartColorRange = 0
                    }

                    def RealityKitStruct "spawnedEmitter"
                    {
                    }
                }
            }
        }
    }

    def Cube "Cube_4" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
    )
    {
        rel material:binding = </Root/Cube_4/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 3, 1)
        float3 xformOp:translate = (-1.7, 0.4, 0.7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/Cube_4/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def "Arknights_Originite_Prime" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 3.1415925, 0)
        }
        references = @Arknights_Originite_Prime.usdz@
    )
    {
        quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
        float3 xformOp:scale = (0.0007266718, 0.0007266718, 0.0007266718)
        float3 xformOp:translate = (-1.7, 0.8, 0.7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "Transform"
    {
        reorder nameChildren = ["SpotLight", "SpotLight_1", "SpotLight_2", "SpotLight_3", "SpotLight_4"]
        def Xform "SpotLight" (
            customData = {
                float3 rotationEulerHint = (-1.5702474, -5.9604638e-8, 5.9571935e-8)
            }
        )
        {
            quatf xformOp:orient = (0.7073008, -0.7069127, -4.2135284e-8, -1.2557294e-15)
            float3 xformOp:scale = (1, 0.99999994, 0.99999994)
            float3 xformOp:translate = (2.364976, 2.967889, 0.92296743)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "SpotLight"
            {
                token info:id = "RealityKit.SpotLight"
                float intensity = 1000

                def RealityKitStruct "Shadow"
                {
                }
            }
        }

        def Xform "SpotLight_1" (
            customData = {
                float3 rotationEulerHint = (-1.5702474, -5.9604638e-8, 5.9571935e-8)
            }
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (0.7073008, -0.70691276, -4.2126867e-8, 1.8760596e-12)
            float3 xformOp:scale = (1.0000001, 1, 0.99999994)
            float3 xformOp:translate = (1.4818562, 2.967889, 0.9231193)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "SpotLight"
            {
                token info:id = "RealityKit.SpotLight"
                float intensity = 1000

                def RealityKitStruct "Shadow"
                {
                }
            }
        }

        def Xform "SpotLight_2" (
            customData = {
                float3 rotationEulerHint = (-1.5702474, -5.9604638e-8, 5.9571935e-8)
            }
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (0.7073008, -0.70691276, -4.2126867e-8, 1.8760596e-12)
            float3 xformOp:scale = (1.0000001, 1, 0.99999994)
            float3 xformOp:translate = (-0.57825714, 2.967889, 0.923473)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "SpotLight"
            {
                token info:id = "RealityKit.SpotLight"
                float intensity = 1000

                def RealityKitStruct "Shadow"
                {
                }
            }
        }

        def Xform "SpotLight_3" (
            customData = {
                float3 rotationEulerHint = (-1.5702474, -5.9604638e-8, 5.9571935e-8)
            }
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (0.7073008, -0.70691276, -4.2126867e-8, 1.8760596e-12)
            float3 xformOp:scale = (1.0000001, 1, 0.99999994)
            float3 xformOp:translate = (-1.6268286, 2.967889, 0.9236504)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "SpotLight"
            {
                token info:id = "RealityKit.SpotLight"
                float intensity = 1000

                def RealityKitStruct "Shadow"
                {
                }
            }
        }

        def Xform "SpotLight_4" (
            customData = {
                float3 rotationEulerHint = (-1.5702474, -5.9604638e-8, 5.9571935e-8)
            }
        )
        {
            float2 ui:nodegraph:node:pos = (40, 40)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (0.7073008, -0.70691276, -4.2115822e-8, 1.1412069e-11)
            float3 xformOp:scale = (1.0000002, 1, 0.99999994)
            float3 xformOp:translate = (0.35391334, 2.967889, 0.92331606)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "SpotLight"
            {
                token info:id = "RealityKit.SpotLight"
                float intensity = 1000

                def RealityKitStruct "Shadow"
                {
                }
            }
        }
    }
}

